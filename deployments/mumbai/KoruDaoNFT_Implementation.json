{
  "address": "0x1FD78495DcE514b9338b0F0E5dc54BE8B6c8Aa05",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_restricted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_koruDaoProfileId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPubCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minFollowers",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_gelatoRelay",
          "type": "address"
        },
        {
          "internalType": "contract ILensHub",
          "name": "_lensHub",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelatoRelay",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "isEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "koruDaoProfileId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lensHub",
      "outputs": [
        {
          "internalType": "contract ILensHub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minFollowers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPubCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "restricted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseUri",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xffc420003f8eff31e4167e21873d06937ef31db2b370777e90da0dec1e8aca17",
  "receipt": {
    "to": null,
    "from": "0xCDf41a135C65d0013393B3793F92b4FAF31032d0",
    "contractAddress": "0x1FD78495DcE514b9338b0F0E5dc54BE8B6c8Aa05",
    "transactionIndex": 12,
    "gasUsed": "3947930",
    "logsBloom": "0x
    "blockHash": "0x216b5306b3d7a4b7ccec9bf4d4b59782a7318e049c07c6d8e4450cd31039cb90",
    "transactionHash": "0xffc420003f8eff31e4167e21873d06937ef31db2b370777e90da0dec1e8aca17",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 28922962,
        "transactionHash": "0xffc420003f8eff31e4167e21873d06937ef31db2b370777e90da0dec1e8aca17",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cdf41a135c65d0013393b3793f92b4faf31032d0",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001509ee9fdf4600000000000000000000000000000000000000000000000003067f5b9f9a29c6a3000000000000000000000000000000000000000000001740da06a2c3f6acb8f8000000000000000000000000000000000000000000000003066a51b0fa4a80a3000000000000000000000000000000000000000000001740da1bacb2968bfef8",
        "logIndex": 55,
        "blockHash": "0x216b5306b3d7a4b7ccec9bf4d4b59782a7318e049c07c6d8e4450cd31039cb90"
      }
    ],
    "blockNumber": 28922962,
    "cumulativeGasUsed": "5725059",
    "status": 1,
    "byzantium": true
  },
  "args": [
    true,
    false,
    282,
    16978,
    2,
    2,
    "0xaBcC9b596420A9E9172FD5938620E265a0f9Df92",
    "0x60Ae865ee4C725cd04353b5AAb364553f56ceF82"
  ],
  "numDeployments": 17,
  "solcInputHash": "d09edfd4b38899ccd1a4e330a3d340c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_restricted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_koruDaoProfileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPubCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minFollowers\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gelatoRelay\",\"type\":\"address\"},{\"internalType\":\"contract ILensHub\",\"name\":\"_lensHub\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelatoRelay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"koruDaoProfileId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lensHub\",\"outputs\":[{\"internalType\":\"contract ILensHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFollowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPubCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restricted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KoruDaoNFT.sol\":\"KoruDaoNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x84690ebda74336bdda266a1c10e4edb5e2488bf2ab018cfc0cf11693b743dff6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/KoruDaoNFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {ERC721MetaTx} from \\\"./vendor/oz/ERC721MetaTx.sol\\\";\\nimport {ERC721MetaTxEnumerable} from \\\"./vendor/oz/ERC721MetaTxEnumerable.sol\\\";\\nimport {MintRestrictions} from \\\"./MintRestrictions.sol\\\";\\nimport {Proxied} from \\\"./vendor/proxy/EIP173/Proxied.sol\\\";\\nimport {ILensHub} from \\\"./interfaces/ILensHub.sol\\\";\\n\\ncontract KoruDaoNFT is MintRestrictions, ERC721MetaTxEnumerable, Proxied {\\n    using Strings for uint256;\\n\\n    uint256 public immutable maxSupply;\\n    string public baseUri;\\n    bool public paused;\\n\\n    modifier notPaused() {\\n        require(!paused, \\\"KoruDaoNFT: Paused\\\");\\n        _;\\n    }\\n\\n    //solhint-disable no-empty-blocks\\n    constructor(\\n        bool _restricted,\\n        bool _paused,\\n        uint256 _maxSupply,\\n        uint256 _koruDaoProfileId,\\n        uint256 _minPubCount,\\n        uint256 _minFollowers,\\n        address _gelatoRelay,\\n        ILensHub _lensHub\\n    )\\n        MintRestrictions(\\n            _restricted,\\n            _koruDaoProfileId,\\n            _minPubCount,\\n            _minFollowers,\\n            _gelatoRelay,\\n            _lensHub\\n        )\\n        ERC721MetaTx(\\\"Koru Dao NFT\\\", \\\"KORUDAO\\\", _gelatoRelay)\\n    {\\n        paused = _paused;\\n        maxSupply = _maxSupply;\\n    }\\n\\n    function mint()\\n        external\\n        notPaused\\n        onlyGelatoRelay\\n        onlyEligible(_msgSender())\\n    {\\n        uint256 supplyTotal = totalSupply();\\n\\n        if (restricted)\\n            require(supplyTotal < maxSupply, \\\"KoruDaoNFT: Max Supply\\\");\\n\\n        _safeMint(_msgSender(), supplyTotal + 1);\\n    }\\n\\n    function setBaseUri(string memory _baseUri) external onlyProxyAdmin {\\n        baseUri = _baseUri;\\n    }\\n\\n    function setPaused(bool _paused) external onlyProxyAdmin {\\n        paused = _paused;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory baseURI = _baseURI();\\n        uint256 uriId = !restricted && tokenId > maxSupply\\n            ? (tokenId % maxSupply) + 1\\n            : tokenId;\\n\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, uriId.toString(), \\\".json\\\"))\\n                : \\\"\\\";\\n    }\\n\\n    function name() public pure override returns (string memory) {\\n        return \\\"Koru Dao\\\";\\n    }\\n\\n    function symbol() public pure override returns (string memory) {\\n        return \\\"KORUDAO\\\";\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        if (to != address(0)) _onlyOnePerAccount(to);\\n\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseUri;\\n    }\\n\\n    function _onlyOnePerAccount(address _account) private view {\\n        require(balanceOf(_account) == 0, \\\"KoruDaoNFT: One per account\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3397be9a81f63d32338fd4ab6f5a5deed94069f449f49e318ccef907414f15d8\",\"license\":\"UNLICENSED\"},\"contracts/MintRestrictions.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport {Restrictions} from \\\"./Restrictions.sol\\\";\\nimport {\\n    IERC721Enumerable\\n} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {ILensHub} from \\\"./interfaces/ILensHub.sol\\\";\\n\\nabstract contract MintRestrictions is Restrictions {\\n    uint256 public immutable koruDaoProfileId;\\n    uint256 public immutable minPubCount;\\n    uint256 public immutable minFollowers;\\n\\n    modifier onlyEligible(address sender) {\\n        if (restricted) {\\n            (bool eligible, ) = isEligible(sender);\\n            require(\\n                eligible,\\n                \\\"MintRestrictions: Sender does not meet criteria\\\"\\n            );\\n        }\\n\\n        _;\\n    }\\n\\n    constructor(\\n        bool _restricted,\\n        uint256 _koruDaoProfileId,\\n        uint256 _minPubCount,\\n        uint256 _minFollowers,\\n        address _gelatoRelay,\\n        ILensHub _lensHub\\n    ) Restrictions(_restricted, _gelatoRelay, _lensHub) {\\n        koruDaoProfileId = _koruDaoProfileId;\\n        minPubCount = _minPubCount;\\n        minFollowers = _minFollowers;\\n    }\\n\\n    function isEligible(address _wallet)\\n        public\\n        view\\n        returns (bool, bool[] memory)\\n    {\\n        uint256 profileId = lensHub.defaultProfile(_wallet);\\n        require(\\n            profileId != 0,\\n            \\\"MintRestrictions: Wallet does not have default profile\\\"\\n        );\\n\\n        bool eligible = true;\\n        bool[] memory unmetCriterias = new bool[](4);\\n\\n        if (!_hasLensProfile(_wallet)) {\\n            unmetCriterias[0] = true;\\n            eligible = false;\\n        }\\n        if (!_isFollowingKoruDao(_wallet)) {\\n            unmetCriterias[1] = true;\\n            eligible = false;\\n        }\\n        if (!_hasMinPublish(profileId)) {\\n            unmetCriterias[2] = true;\\n            eligible = false;\\n        }\\n        if (!_hasMinFollower(profileId)) {\\n            unmetCriterias[3] = true;\\n            eligible = false;\\n        }\\n\\n        return (eligible, unmetCriterias);\\n    }\\n\\n    function _isFollowingKoruDao(address _wallet) private view returns (bool) {\\n        address followNFT = lensHub.getFollowNFT(koruDaoProfileId);\\n        if (followNFT == address(0)) return false;\\n\\n        return IERC721Enumerable(followNFT).balanceOf(_wallet) > 0;\\n    }\\n\\n    function _hasMinPublish(uint256 _profileId) private view returns (bool) {\\n        uint256 pubCount = lensHub.getPubCount(_profileId);\\n\\n        return pubCount >= minPubCount;\\n    }\\n\\n    function _hasMinFollower(uint256 _profileId) private view returns (bool) {\\n        address followNFT = lensHub.getFollowNFT(_profileId);\\n\\n        if (followNFT == address(0)) return false;\\n\\n        uint256 followers = IERC721Enumerable(followNFT).totalSupply();\\n        return followers >= minFollowers;\\n    }\\n}\\n\",\"keccak256\":\"0xf6258321113bbe342a87d644561775718d90e11174752fc61a619da88ddf4d46\",\"license\":\"UNLICENSED\"},\"contracts/Restrictions.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport {ILensHub} from \\\"./interfaces/ILensHub.sol\\\";\\n\\nabstract contract Restrictions {\\n    bool public immutable restricted;\\n    address public immutable gelatoRelay;\\n    ILensHub public immutable lensHub;\\n\\n    modifier onlyLensProfileOwner(address sender) {\\n        if (restricted)\\n            require(\\n                _hasLensProfile(sender),\\n                \\\"Restrictions: Only lens profile holder\\\"\\n            );\\n        _;\\n    }\\n\\n    modifier onlyGelatoRelay() {\\n        require(msg.sender == gelatoRelay, \\\"Restrictions: Only Gelato relay\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        bool _restricted,\\n        address _gelatoRelay,\\n        ILensHub _lensHub\\n    ) {\\n        restricted = _restricted;\\n        lensHub = _lensHub;\\n        gelatoRelay = _gelatoRelay;\\n    }\\n\\n    function _hasLensProfile(address _wallet) internal view returns (bool) {\\n        return lensHub.balanceOf(_wallet) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf4813e3e5e58821e915ded525660357946c81f299e4adc74a7d5e709cdd06cf4\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ILensHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {DataTypes} from \\\"../libraries/LensDataTypes.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title ILensHub\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the LensHub contract, the main entry point for the Lens Protocol.\\n * You'll find all the events and external functions, as well as the reasoning behind them here.\\n */\\ninterface ILensHub is IERC721 {\\n    /**\\n     * @notice Initializes the LensHub NFT, setting the initial governance address as well as the name and symbol in\\n     * the LensNFTBase contract.\\n     *\\n     * @param name The name to set for the hub NFT.\\n     * @param symbol The symbol to set for the hub NFT.\\n     * @param newGovernance The governance address to set.\\n     */\\n    function initialize(\\n        string calldata name,\\n        string calldata symbol,\\n        address newGovernance\\n    ) external;\\n\\n    /**\\n     * @notice Sets the privileged governance role. This function can only be called by the current governance\\n     * address.\\n     *\\n     * @param newGovernance The new governance address to set.\\n     */\\n    function setGovernance(address newGovernance) external;\\n\\n    /**\\n     * @notice Sets the emergency admin, which is a permissioned role able to set the protocol state. This function\\n     * can only be called by the governance address.\\n     *\\n     * @param newEmergencyAdmin The new emergency admin address to set.\\n     */\\n    function setEmergencyAdmin(address newEmergencyAdmin) external;\\n\\n    /**\\n     * @notice Sets the protocol state to either a global pause, a publishing pause or an unpaused state. This function\\n     * can only be called by the governance address or the emergency admin address.\\n     *\\n     * Note that this reverts if the emergency admin calls it if:\\n     *      1. The emergency admin is attempting to unpause.\\n     *      2. The emergency admin is calling while the protocol is already paused.\\n     *\\n     * @param newState The state to set, as a member of the ProtocolState enum.\\n     */\\n    function setState(DataTypes.ProtocolState newState) external;\\n\\n    /**\\n     * @notice Adds or removes a profile creator from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param profileCreator The profile creator address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the profile creator should be whitelisted.\\n     */\\n    function whitelistProfileCreator(address profileCreator, bool whitelist)\\n        external;\\n\\n    /**\\n     * @notice Adds or removes a follow module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param followModule The follow module contract address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the follow module should be whitelisted.\\n     */\\n    function whitelistFollowModule(address followModule, bool whitelist)\\n        external;\\n\\n    /**\\n     * @notice Adds or removes a reference module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param referenceModule The reference module contract to add or remove from the whitelist.\\n     * @param whitelist Whether or not the reference module should be whitelisted.\\n     */\\n    function whitelistReferenceModule(address referenceModule, bool whitelist)\\n        external;\\n\\n    /**\\n     * @notice Adds or removes a collect module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param collectModule The collect module contract address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the collect module should be whitelisted.\\n     */\\n    function whitelistCollectModule(address collectModule, bool whitelist)\\n        external;\\n\\n    /**\\n     * @notice Creates a profile with the specified parameters, minting a profile NFT to the given recipient. This\\n     * function must be called by a whitelisted profile creator.\\n     *\\n     * @param vars A CreateProfileData struct containing the following params:\\n     *      to: The address receiving the profile.\\n     *      handle: The handle to set for the profile, must be unique and non-empty.\\n     *      imageURI: The URI to set for the profile image.\\n     *      followModule: The follow module to use, can be the zero address.\\n     *      followModuleInitData: The follow module initialization data, if any.\\n     */\\n    function createProfile(DataTypes.CreateProfileData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Sets the mapping between wallet and its main profile identity.\\n     *\\n     * @param profileId The token ID of the profile to set as the main profile identity.\\n     */\\n    function setDefaultProfile(uint256 profileId) external;\\n\\n    /**\\n     * @notice Sets the mapping between wallet and its main profile identity via signature with the specified parameters.\\n     *\\n     * @param vars A SetDefaultProfileWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setDefaultProfileWithSig(\\n        DataTypes.SetDefaultProfileWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's follow module, must be called by the profile owner.\\n     *\\n     * @param profileId The token ID of the profile to set the follow module for.\\n     * @param followModule The follow module to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the follow module for initialization.\\n     */\\n    function setFollowModule(\\n        uint256 profileId,\\n        address followModule,\\n        bytes calldata followModuleInitData\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's follow module via signature with the specified parameters.\\n     *\\n     * @param vars A SetFollowModuleWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setFollowModuleWithSig(\\n        DataTypes.SetFollowModuleWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's dispatcher, giving that dispatcher rights to publish to that profile.\\n     *\\n     * @param profileId The token ID of the profile of the profile to set the dispatcher for.\\n     * @param dispatcher The dispatcher address to set for the given profile ID.\\n     */\\n    function setDispatcher(uint256 profileId, address dispatcher) external;\\n\\n    /**\\n     * @notice Sets a profile's dispatcher via signature with the specified parameters.\\n     *\\n     * @param vars A SetDispatcherWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setDispatcherWithSig(\\n        DataTypes.SetDispatcherWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's URI, which is reflected in the `tokenURI()` function.\\n     *\\n     * @param profileId The token ID of the profile of the profile to set the URI for.\\n     * @param imageURI The URI to set for the given profile.\\n     */\\n    function setProfileImageURI(uint256 profileId, string calldata imageURI)\\n        external;\\n\\n    /**\\n     * @notice Sets a profile's URI via signature with the specified parameters.\\n     *\\n     * @param vars A SetProfileImageURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setProfileImageURIWithSig(\\n        DataTypes.SetProfileImageURIWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a followNFT URI for a given profile's follow NFT.\\n     *\\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\\n     * @param followNFTURI The follow NFT URI to set.\\n     */\\n    function setFollowNFTURI(uint256 profileId, string calldata followNFTURI)\\n        external;\\n\\n    /**\\n     * @notice Sets a followNFT URI via signature with the specified parameters.\\n     *\\n     * @param vars A SetFollowNFTURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setFollowNFTURIWithSig(\\n        DataTypes.SetFollowNFTURIWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Publishes a post to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A PostData struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the post's publication ID.\\n     */\\n    function post(DataTypes.PostData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a post to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A PostWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the post's publication ID.\\n     */\\n    function postWithSig(DataTypes.PostWithSigData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Publishes a comment to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A CommentData struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the comment's publication ID.\\n     */\\n    function comment(DataTypes.CommentData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Publishes a comment to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A CommentWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the comment's publication ID.\\n     */\\n    function commentWithSig(DataTypes.CommentWithSigData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Publishes a mirror to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A MirrorData struct containing the necessary parameters.\\n     *\\n     * @return uint256 An integer representing the mirror's publication ID.\\n     */\\n    function mirror(DataTypes.MirrorData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Publishes a mirror to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A MirrorWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the mirror's publication ID.\\n     */\\n    function mirrorWithSig(DataTypes.MirrorWithSigData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Follows the given profiles, executing each profile's follow module logic (if any) and minting followNFTs to the caller.\\n     *\\n     * NOTE: Both the `profileIds` and `datas` arrays must be of the same length, regardless if the profiles do not have a follow module set.\\n     *\\n     * @param profileIds The token ID array of the profiles to follow.\\n     * @param datas The arbitrary data array to pass to the follow module for each profile if needed.\\n     *\\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\\n     */\\n    function follow(uint256[] calldata profileIds, bytes[] calldata datas)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Follows a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A FollowWithSigData struct containing the regular parameters as well as the signing follower's address\\n     * and an EIP712Signature struct.\\n     *\\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\\n     */\\n    function followWithSig(DataTypes.FollowWithSigData calldata vars)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Collects a given publication, executing collect module logic and minting a collectNFT to the caller.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to collect.\\n     * @param pubId The publication to collect's publication ID.\\n     * @param data The arbitrary data to pass to the collect module if needed.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function collect(\\n        uint256 profileId,\\n        uint256 pubId,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Collects a given publication via signature with the specified parameters.\\n     *\\n     * @param vars A CollectWithSigData struct containing the regular parameters as well as the collector's address and\\n     * an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function collectWithSig(DataTypes.CollectWithSigData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @dev Helper function to emit a detailed followNFT transfer event from the hub, to be consumed by frontends to track\\n     * followNFT transfers.\\n     *\\n     * @param profileId The token ID of the profile associated with the followNFT being transferred.\\n     * @param followNFTId The followNFT being transferred's token ID.\\n     * @param from The address the followNFT is being transferred from.\\n     * @param to The address the followNFT is being transferred to.\\n     */\\n    function emitFollowNFTTransferEvent(\\n        uint256 profileId,\\n        uint256 followNFTId,\\n        address from,\\n        address to\\n    ) external;\\n\\n    /**\\n     * @dev Helper function to emit a detailed collectNFT transfer event from the hub, to be consumed by frontends to track\\n     * collectNFT transfers.\\n     *\\n     * @param profileId The token ID of the profile associated with the collect NFT being transferred.\\n     * @param pubId The publication ID associated with the collect NFT being transferred.\\n     * @param collectNFTId The collectNFT being transferred's token ID.\\n     * @param from The address the collectNFT is being transferred from.\\n     * @param to The address the collectNFT is being transferred to.\\n     */\\n    function emitCollectNFTTransferEvent(\\n        uint256 profileId,\\n        uint256 pubId,\\n        uint256 collectNFTId,\\n        address from,\\n        address to\\n    ) external;\\n\\n    /// ************************\\n    /// *****VIEW FUNCTIONS*****\\n    /// ************************\\n\\n    /**\\n     * @notice Returns whether or not a profile creator is whitelisted.\\n     *\\n     * @param profileCreator The address of the profile creator to check.\\n     *\\n     * @return bool True if the profile creator is whitelisted, false otherwise.\\n     */\\n    function isProfileCreatorWhitelisted(address profileCreator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns default profile for a given wallet address\\n     *\\n     * @param wallet The address to find the default mapping\\n     *\\n     * @return uint256 The default profile id, which will be 0 if not mapped.\\n     */\\n    function defaultProfile(address wallet) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns whether or not a follow module is whitelisted.\\n     *\\n     * @param followModule The address of the follow module to check.\\n     *\\n     * @return bool True if the the follow module is whitelisted, false otherwise.\\n     */\\n    function isFollowModuleWhitelisted(address followModule)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns whether or not a reference module is whitelisted.\\n     *\\n     * @param referenceModule The address of the reference module to check.\\n     *\\n     * @return bool True if the the reference module is whitelisted, false otherwise.\\n     */\\n    function isReferenceModuleWhitelisted(address referenceModule)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns whether or not a collect module is whitelisted.\\n     *\\n     * @param collectModule The address of the collect module to check.\\n     *\\n     * @return bool True if the the collect module is whitelisted, false otherwise.\\n     */\\n    function isCollectModuleWhitelisted(address collectModule)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns the currently configured governance address.\\n     *\\n     * @return address The address of the currently configured governance.\\n     */\\n    function getGovernance() external view returns (address);\\n\\n    /**\\n     * @notice Returns the dispatcher associated with a profile.\\n     *\\n     * @param profileId The token ID of the profile to query the dispatcher for.\\n     *\\n     * @return address The dispatcher address associated with the profile.\\n     */\\n    function getDispatcher(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the publication count for a given profile.\\n     *\\n     * @param profileId The token ID of the profile to query.\\n     *\\n     * @return uint256 The number of publications associated with the queried profile.\\n     */\\n    function getPubCount(uint256 profileId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the followNFT associated with a given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile to query the followNFT for.\\n     *\\n     * @return address The followNFT associated with the given profile.\\n     */\\n    function getFollowNFT(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the followNFT URI associated with a given profile.\\n     *\\n     * @param profileId The token ID of the profile to query the followNFT URI for.\\n     *\\n     * @return string The followNFT URI associated with the given profile.\\n     */\\n    function getFollowNFTURI(uint256 profileId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Returns the collectNFT associated with a given publication, if any.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return address The address of the collectNFT associated with the queried publication.\\n     */\\n    function getCollectNFT(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Returns the follow module associated witha  given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile to query the follow module for.\\n     *\\n     * @return address The address of the follow module associated with the given profile.\\n     */\\n    function getFollowModule(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the collect module associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return address The address of the collect module associated with the queried publication.\\n     */\\n    function getCollectModule(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Returns the reference module associated witha  given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to querythe reference module for.\\n     * @param pubId The publication ID of the publication to query the reference module for.\\n     *\\n     * @return address The address of the reference module associated with the given profile.\\n     */\\n    function getReferenceModule(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Returns the handle associated with a profile.\\n     *\\n     * @param profileId The token ID of the profile to query the handle for.\\n     *\\n     * @return string The handle associated with the profile.\\n     */\\n    function getHandle(uint256 profileId) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the publication pointer (profileId & pubId) associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query the pointer for.\\n     * @param pubId The publication ID of the publication to query the pointer for.\\n     *\\n     * @return tuple First, the profile ID of the profile the current publication is pointing to, second, the\\n     * publication ID of the publication the current publication is pointing to.\\n     */\\n    function getPubPointer(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the URI associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return string The URI associated with a given publication.\\n     */\\n    function getContentURI(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Returns the profile token ID according to a given handle.\\n     *\\n     * @param handle The handle to resolve the profile token ID with.\\n     *\\n     * @return uint256 The profile ID the passed handle points to.\\n     */\\n    function getProfileIdByHandle(string calldata handle)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the full profile struct associated with a given profile token ID.\\n     *\\n     * @param profileId The token ID of the profile to query.\\n     *\\n     * @return ProfileStruct The profile struct of the given profile.\\n     */\\n    function getProfile(uint256 profileId)\\n        external\\n        view\\n        returns (DataTypes.ProfileStruct memory);\\n\\n    /**\\n     * @notice Returns the full publication struct for a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return PublicationStruct The publication struct associated with the queried publication.\\n     */\\n    function getPub(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (DataTypes.PublicationStruct memory);\\n\\n    /**\\n     * @notice Returns the publication type associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return PubType The publication type, as a member of an enum (either \\\"post,\\\" \\\"comment\\\" or \\\"mirror\\\").\\n     */\\n    function getPubType(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (DataTypes.PubType);\\n\\n    /**\\n     * @notice Returns the follow NFT implementation address.\\n     *\\n     * @return address The follow NFT implementation address.\\n     */\\n    function getFollowNFTImpl() external view returns (address);\\n\\n    /**\\n     * @notice Returns the collect NFT implementation address.\\n     *\\n     * @return address The collect NFT implementation address.\\n     */\\n    function getCollectNFTImpl() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa3ab9df0697134cd879ca19123a159c63fc070cb4e5c963f68b13ba80e8bde92\",\"license\":\"MIT\"},\"contracts/libraries/LensDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title DataTypes\\n * @author Lens Protocol\\n *\\n * @notice A standard library of data types used throughout the Lens Protocol.\\n */\\nlibrary DataTypes {\\n    /**\\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\\n     *\\n     * @param Unpaused The fully unpaused state.\\n     * @param PublishingPaused The state where only publication creation functions are paused.\\n     * @param Paused The fully paused state.\\n     */\\n    enum ProtocolState {\\n        Unpaused,\\n        PublishingPaused,\\n        Paused\\n    }\\n\\n    /**\\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\\n     *\\n     * @param Post A standard post, having a URI, a collect module but no pointer to another publication.\\n     * @param Comment A comment, having a URI, a collect module and a pointer to another publication.\\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or collect module.\\n     * @param Nonexistent An indicator showing the queried publication does not exist.\\n     */\\n    enum PubType {\\n        Post,\\n        Comment,\\n        Mirror,\\n        Nonexistent\\n    }\\n\\n    /**\\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\\n     *\\n     * @param v The signature's recovery parameter.\\n     * @param r The signature's r parameter.\\n     * @param s The signature's s parameter\\n     * @param deadline The signature's deadline\\n     */\\n    struct EIP712Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @notice A struct containing profile data.\\n     *\\n     * @param pubCount The number of publications made to this profile.\\n     * @param followModule The address of the current follow module in use by this profile, can be empty.\\n     * @param followNFT The address of the followNFT associated with this profile, can be empty..\\n     * @param handle The profile's associated handle.\\n     * @param imageURI The URI to be used for the profile's image.\\n     * @param followNFTURI The URI to be used for the follow NFT.\\n     */\\n    struct ProfileStruct {\\n        uint256 pubCount;\\n        address followModule;\\n        address followNFT;\\n        string handle;\\n        string imageURI;\\n        string followNFTURI;\\n    }\\n\\n    /**\\n     * @notice A struct containing data associated with each new publication.\\n     *\\n     * @param profileIdPointed The profile token ID this publication points to, for mirrors and comments.\\n     * @param pubIdPointed The publication ID this publication points to, for mirrors and comments.\\n     * @param contentURI The URI associated with this publication.\\n     * @param referenceModule The address of the current reference module in use by this profile, can be empty.\\n     * @param collectModule The address of the collect module associated with this publication, this exists for all publication.\\n     * @param collectNFT The address of the collectNFT associated with this publication, if any.\\n     */\\n    struct PublicationStruct {\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        string contentURI;\\n        address referenceModule;\\n        address collectModule;\\n        address collectNFT;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `createProfile()` function.\\n     *\\n     * @param to The address receiving the profile.\\n     * @param handle The handle to set for the profile, must be unique and non-empty.\\n     * @param imageURI The URI to set for the profile image.\\n     * @param followModule The follow module to use, can be the zero address.\\n     * @param followModuleInitData The follow module initialization data, if any.\\n     * @param followNFTURI The URI to use for the follow NFT.\\n     */\\n    struct CreateProfileData {\\n        address to;\\n        string handle;\\n        string imageURI;\\n        address followModule;\\n        bytes followModuleInitData;\\n        string followNFTURI;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setDefaultProfileWithSig()` function. Parameters are\\n     * the same as the regular `setDefaultProfile()` function, with an added EIP712Signature.\\n     *\\n     * @param wallet The address of the wallet setting the default profile.\\n     * @param profileId The token ID of the profile which will be set as default, or zero.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetDefaultProfileWithSigData {\\n        address wallet;\\n        uint256 profileId;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setFollowModuleWithSig()` function. Parameters are\\n     * the same as the regular `setFollowModule()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to change the followModule for.\\n     * @param followModule The followModule to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the followModule for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetFollowModuleWithSigData {\\n        uint256 profileId;\\n        address followModule;\\n        bytes followModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setDispatcherWithSig()` function. Parameters are the same\\n     * as the regular `setDispatcher()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to set the dispatcher for.\\n     * @param dispatcher The dispatcher address to set for the profile.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetDispatcherWithSigData {\\n        uint256 profileId;\\n        address dispatcher;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setProfileImageURIWithSig()` function. Parameters are the same\\n     * as the regular `setProfileImageURI()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to set the URI for.\\n     * @param imageURI The URI to set for the given profile image.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetProfileImageURIWithSigData {\\n        uint256 profileId;\\n        string imageURI;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setFollowNFTURIWithSig()` function. Parameters are the same\\n     * as the regular `setFollowNFTURI()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\\n     * @param followNFTURI The follow NFT URI to set.\\n     * @param sig The EIP712Signature struct containing the followNFT's associated profile owner's signature.\\n     */\\n    struct SetFollowNFTURIWithSigData {\\n        uint256 profileId;\\n        string followNFTURI;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `post()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param collectModule The collect module to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct PostData {\\n        uint256 profileId;\\n        string contentURI;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `postWithSig()` function. Parameters are the same as\\n     * the regular `post()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param collectModule The collectModule to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct PostWithSigData {\\n        uint256 profileId;\\n        string contentURI;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `comment()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param profileIdPointed The profile token ID to point the comment to.\\n     * @param pubIdPointed The publication ID to point the comment to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collect module to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct CommentData {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `commentWithSig()` function. Parameters are the same as\\n     * the regular `comment()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param profileIdPointed The profile token ID to point the comment to.\\n     * @param pubIdPointed The publication ID to point the comment to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collectModule to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct CommentWithSigData {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirror()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param profileIdPointed The profile token ID to point the mirror to.\\n     * @param pubIdPointed The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct MirrorData {\\n        uint256 profileId;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirrorWithSig()` function. Parameters are the same as\\n     * the regular `mirror()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param profileIdPointed The profile token ID to point the mirror to.\\n     * @param pubIdPointed The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct MirrorWithSigData {\\n        uint256 profileId;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `followWithSig()` function. Parameters are the same\\n     * as the regular `follow()` function, with the follower's (signer) address and an EIP712Signature added.\\n     *\\n     * @param follower The follower which is the message signer.\\n     * @param profileIds The array of token IDs of the profiles to follow.\\n     * @param datas The array of arbitrary data to pass to the followModules if needed.\\n     * @param sig The EIP712Signature struct containing the follower's signature.\\n     */\\n    struct FollowWithSigData {\\n        address follower;\\n        uint256[] profileIds;\\n        bytes[] datas;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `collectWithSig()` function. Parameters are the same as\\n     * the regular `collect()` function, with the collector's (signer) address and an EIP712Signature added.\\n     *\\n     * @param collector The collector which is the message signer.\\n     * @param profileId The token ID of the profile that published the publication to collect.\\n     * @param pubId The publication to collect's publication ID.\\n     * @param data The arbitrary data to pass to the collectModule if needed.\\n     * @param sig The EIP712Signature struct containing the collector's signature.\\n     */\\n    struct CollectWithSigData {\\n        address collector;\\n        uint256 profileId;\\n        uint256 pubId;\\n        bytes data;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setProfileMetadataWithSig()` function.\\n     *\\n     * @param profileId The profile ID for which to set the metadata.\\n     * @param metadata The metadata string to set for the profile and user.\\n     * @param sig The EIP712Signature struct containing the user's signature.\\n     */\\n    struct SetProfileMetadataWithSigData {\\n        uint256 profileId;\\n        string metadata;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `toggleFollowWithSig()` function.\\n     *\\n     * @param follower The follower which is the message signer.\\n     * @param profileIds The token ID array of the profiles.\\n     * @param enables The array of booleans to enable/disable follows.\\n     * @param sig The EIP712Signature struct containing the follower's signature.\\n     */\\n    struct ToggleFollowWithSigData {\\n        address follower;\\n        uint256[] profileIds;\\n        bool[] enables;\\n        EIP712Signature sig;\\n    }\\n}\\n\",\"keccak256\":\"0x010e8a2b32890fba7eae1858bf4cede187b811bed8db956e10cd82ec0dec27c5\",\"license\":\"MIT\"},\"contracts/vendor/oz/ERC721MetaTx.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 iplementation with ERC2771Context\\n */\\ncontract ERC721MetaTx is ERC2771Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address _trustedForwarder\\n    ) ERC2771Context(_trustedForwarder) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        address owner = _owners[tokenId];\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: owner query for nonexistent token\\\"\\n        );\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721MetaTx.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ERC721MetaTx.ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721MetaTx.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            ERC721MetaTx.ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer from incorrect owner\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721MetaTx.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd5f33a35dda25fe17957ee1e7151d21f77738e143175cca2ef7392238836a7be\",\"license\":\"MIT\"},\"contracts/vendor/oz/ERC721MetaTxEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721MetaTx.sol\\\";\\nimport \\\"./IERC721MetaTxEnumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721MetaTxEnumerable is\\n    ERC721MetaTx,\\n    IERC721MetaTxEnumerable\\n{\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC721MetaTx)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            index < ERC721MetaTx.balanceOf(owner),\\n            \\\"ERC721Enumerable: owner index out of bounds\\\"\\n        );\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            index < ERC721MetaTxEnumerable.totalSupply(),\\n            \\\"ERC721Enumerable: global index out of bounds\\\"\\n        );\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721MetaTx.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\\n        private\\n    {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721MetaTx.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x294aee217c26ef977223498b24c9a9f56ca45855d1bcf859b891f195ea6a0166\",\"license\":\"MIT\"},\"contracts/vendor/oz/IERC721MetaTxEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n//solhint-disable no-empty-blocks\\ninterface IERC721MetaTxEnumerable is IERC721Enumerable {\\n\\n}\\n\",\"keccak256\":\"0x6a3cf4db46730290c6870cce30be9dd194e519cb1a39a69b94121fe7197f9287\",\"license\":\"MIT\"},\"contracts/vendor/proxy/EIP173/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address adminAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            adminAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x428ced1961d42c505a3e49d90498f92f4b0df8537e5ffa59f14ba375d99150a1\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b5060405162004b5938038062004b598339818101604052810190620000389190620003b9565b6040518060400160405280600c81526020017f4b6f72752044616f204e465400000000000000000000000000000000000000008152506040518060400160405280600781526020017f4b4f525544414f0000000000000000000000000000000000000000000000000081525083808b89898989898582828215156080811515815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505050508460e081815250508361010081815250508261012081815250505050505050508073ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff168152505050826000908051906020019062000194929190620001e2565b508160019080519060200190620001ad929190620001e2565b5050505086600b60006101000a81548160ff0219169083151502179055508561016081815250505050505050505050620004e6565b828054620001f090620004b1565b90600052602060002090601f01602090048101928262000214576000855562000260565b82601f106200022f57805160ff191683800117855562000260565b8280016001018555821562000260579182015b828111156200025f57825182559160200191906001019062000242565b5b5090506200026f919062000273565b5090565b5b808211156200028e57600081600090555060010162000274565b5090565b600080fd5b60008115159050919050565b620002ae8162000297565b8114620002ba57600080fd5b50565b600081519050620002ce81620002a3565b92915050565b6000819050919050565b620002e981620002d4565b8114620002f557600080fd5b50565b6000815190506200030981620002de565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200033c826200030f565b9050919050565b6200034e816200032f565b81146200035a57600080fd5b50565b6000815190506200036e8162000343565b92915050565b600062000381826200032f565b9050919050565b620003938162000374565b81146200039f57600080fd5b50565b600081519050620003b38162000388565b92915050565b600080600080600080600080610100898b031215620003dd57620003dc62000292565b5b6000620003ed8b828c01620002bd565b9850506020620004008b828c01620002bd565b9750506040620004138b828c01620002f8565b9650506060620004268b828c01620002f8565b9550506080620004398b828c01620002f8565b94505060a06200044c8b828c01620002f8565b93505060c06200045f8b828c016200035d565b92505060e0620004728b828c01620003a2565b9150509295985092959890939650565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004ca57607f821691505b602082108103620004e057620004df62000482565b5b50919050565b60805160a05160c05160e051610100516101205161014051610160516145a4620005b5600039600081816109d9015281816113bf015281816113ef015261147a01526000610cb8015260008181610dd20152611f3901526000818161131a0152611dbd0152600081816111000152611bda015260008181610dfc0152818161129401528181611af901528181611b9e01528181611d210152611dec01526000818161089b0152610c01015260008181610931015281816109b301528181611025015261139601526145a46000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80636363141011610104578063a0bcfc7f116100a2578063c631029e11610071578063c631029e1461055a578063c87b56dd14610578578063d5abeb01146105a8578063e985e9c5146105c6576101da565b8063a0bcfc7f146104e8578063a22cb46514610504578063b02cfdc314610520578063b88d4fde1461053e576101da565b806370a08231116100de57806370a082311461045e57806384af9a921461048e57806395d89b41146104ac5780639abc8320146104ca576101da565b806363631410146103f157806366e305fd1461040f5780637072c6b114610440576101da565b806323b872dd1161017c5780634f6ccce71161014b5780634f6ccce714610343578063572b6c05146103735780635c975abb146103a35780636352211e146103c1576101da565b806323b872dd146102bd5780632f745c59146102d95780633552221a1461030957806342842e0e14610327576101da565b8063095ea7b3116101b8578063095ea7b31461025d5780631249c58b1461027957806316c38b3c1461028357806318160ddd1461029f576101da565b806301ffc9a7146101df57806306fdde031461020f578063081812fc1461022d575b600080fd5b6101f960048036038101906101f49190612d3c565b6105f6565b6040516102069190612d84565b60405180910390f35b610217610670565b6040516102249190612e38565b60405180910390f35b61024760048036038101906102429190612e90565b6106ad565b6040516102549190612efe565b60405180910390f35b61027760048036038101906102729190612f45565b610732565b005b610281610849565b005b61029d60048036038101906102989190612fb1565b610a5b565b005b6102a7610aed565b6040516102b49190612fed565b60405180910390f35b6102d760048036038101906102d29190613008565b610afa565b005b6102f360048036038101906102ee9190612f45565b610b5a565b6040516103009190612fed565b60405180910390f35b610311610bff565b60405161031e9190612efe565b60405180910390f35b610341600480360381019061033c9190613008565b610c23565b005b61035d60048036038101906103589190612e90565b610c43565b60405161036a9190612fed565b60405180910390f35b61038d6004803603810190610388919061305b565b610cb4565b60405161039a9190612d84565b60405180910390f35b6103ab610d0c565b6040516103b89190612d84565b60405180910390f35b6103db60048036038101906103d69190612e90565b610d1f565b6040516103e89190612efe565b60405180910390f35b6103f9610dd0565b6040516104069190612fed565b60405180910390f35b6104296004803603810190610424919061305b565b610df4565b604051610437929190613146565b60405180910390f35b610448611023565b6040516104559190612d84565b60405180910390f35b6104786004803603810190610473919061305b565b611047565b6040516104859190612fed565b60405180910390f35b6104966110fe565b6040516104a39190612fed565b60405180910390f35b6104b4611122565b6040516104c19190612e38565b60405180910390f35b6104d261115f565b6040516104df9190612e38565b60405180910390f35b61050260048036038101906104fd91906132ab565b6111ed565b005b61051e600480360381019061051991906132f4565b61127c565b005b610528611292565b6040516105359190613393565b60405180910390f35b6105586004803603810190610553919061344f565b6112b6565b005b610562611318565b60405161056f9190612fed565b60405180910390f35b610592600480360381019061058d9190612e90565b61133c565b60405161059f9190612e38565b60405180910390f35b6105b0611478565b6040516105bd9190612fed565b60405180910390f35b6105e060048036038101906105db91906134d2565b61149c565b6040516105ed9190612d84565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610669575061066882611530565b5b9050919050565b60606040518060400160405280600881526020017f4b6f72752044616f000000000000000000000000000000000000000000000000815250905090565b60006106b882611612565b6106f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ee90613584565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061073d82610d1f565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490613616565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107cc61167e565b73ffffffffffffffffffffffffffffffffffffffff1614806107fb57506107fa816107f561167e565b61149c565b5b61083a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610831906136a8565b60405180910390fd5b61084483836116b0565b505050565b600b60009054906101000a900460ff1615610899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089090613714565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091e90613780565b60405180910390fd5b61092f61167e565b7f0000000000000000000000000000000000000000000000000000000000000000156109a557600061096082610df4565b509050806109a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099a90613812565b60405180910390fd5b505b60006109af610aed565b90507f000000000000000000000000000000000000000000000000000000000000000015610a3a577f00000000000000000000000000000000000000000000000000000000000000008110610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a309061387e565b60405180910390fd5b5b610a57610a4561167e565b600183610a5291906138cd565b611769565b5050565b610a63611787565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac79061396f565b60405180910390fd5b80600b60006101000a81548160ff02191690831515021790555050565b6000600880549050905090565b610b0b610b0561167e565b826117b0565b610b4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4190613a01565b60405180910390fd5b610b5583838361188e565b505050565b6000610b6583611047565b8210610ba6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9d90613a93565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610c3e838383604051806020016040528060008152506112b6565b505050565b6000610c4d610aed565b8210610c8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8590613b25565b60405180910390fd5b60088281548110610ca257610ca1613b45565b5b90600052602060002001549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600b60009054906101000a900460ff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610dc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbe90613be6565b60405180910390fd5b80915050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166392254a62856040518263ffffffff1660e01b8152600401610e539190612efe565b602060405180830381865afa158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e949190613c1b565b905060008103610ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed090613cba565b60405180910390fd5b6000600190506000600467ffffffffffffffff811115610efc57610efb613180565b5b604051908082528060200260200182016040528015610f2a5781602001602082028036833780820191505090505b509050610f3686611af4565b610f6757600181600081518110610f5057610f4f613b45565b5b602002602001019015159081151581525050600091505b610f7086611b99565b610fa157600181600181518110610f8a57610f89613b45565b5b602002602001019015159081151581525050600091505b610faa83611d1c565b610fdb57600181600281518110610fc457610fc3613b45565b5b602002602001019015159081151581525050600091505b610fe483611de7565b61101557600181600381518110610ffe57610ffd613b45565b5b602002602001019015159081151581525050600091505b818194509450505050915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ae90613d4c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606040518060400160405280600781526020017f4b4f525544414f00000000000000000000000000000000000000000000000000815250905090565b600a805461116c90613d9b565b80601f016020809104026020016040519081016040528092919081815260200182805461119890613d9b565b80156111e55780601f106111ba576101008083540402835291602001916111e5565b820191906000526020600020905b8154815290600101906020018083116111c857829003601f168201915b505050505081565b6111f5611787565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611262576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112599061396f565b60405180910390fd5b80600a9080519060200190611278929190612c2d565b5050565b61128e61128761167e565b8383611f65565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6112c76112c161167e565b836117b0565b611306576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fd90613a01565b60405180910390fd5b611312848484846120d1565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606061134782611612565b611386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137d90613e3e565b60405180910390fd5b600061139061212d565b905060007f00000000000000000000000000000000000000000000000000000000000000001580156113e157507f000000000000000000000000000000000000000000000000000000000000000084115b6113eb5783611424565b60017f0000000000000000000000000000000000000000000000000000000000000000856114199190613e8d565b61142391906138cd565b5b90506000825111611444576040518060200160405280600081525061146f565b8161144e826121bf565b60405160200161145f929190613f46565b6040516020818303038152906040525b92505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806115fb57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061160b575061160a8261231f565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600061168933610cb4565b1561169d57601436033560601c90506116ac565b6116a5612389565b90506116ad565b5b90565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661172383610d1f565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611783828260405180602001604052806000815250612391565b5050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b60006117bb82611612565b6117fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f190613fe7565b60405180910390fd5b600061180583610d1f565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061187457508373ffffffffffffffffffffffffffffffffffffffff1661185c846106ad565b73ffffffffffffffffffffffffffffffffffffffff16145b806118855750611884818561149c565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166118ae82610d1f565b73ffffffffffffffffffffffffffffffffffffffff1614611904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fb90614079565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196a9061410b565b60405180910390fd5b61197e8383836123ec565b6119896000826116b0565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119d9919061412b565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a3091906138cd565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611aef83838361243a565b505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401611b509190612efe565b602060405180830381865afa158015611b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b919190613c1b565b119050919050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9ec65637f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611c159190612fed565b602060405180830381865afa158015611c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c569190614174565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c96576000915050611d17565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401611cd19190612efe565b602060405180830381865afa158015611cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d129190613c1b565b119150505b919050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633a15ff07846040518263ffffffff1660e01b8152600401611d789190612fed565b602060405180830381865afa158015611d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db99190613c1b565b90507f0000000000000000000000000000000000000000000000000000000000000000811015915050919050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9ec6563846040518263ffffffff1660e01b8152600401611e439190612fed565b602060405180830381865afa158015611e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e849190614174565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611ec4576000915050611f60565b60008173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f359190613c1b565b90507f0000000000000000000000000000000000000000000000000000000000000000811015925050505b919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611fd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fca906141ed565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516120c49190612d84565b60405180910390a3505050565b6120dc84848461188e565b6120e88484848461243f565b612127576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211e9061427f565b60405180910390fd5b50505050565b6060600a805461213c90613d9b565b80601f016020809104026020016040519081016040528092919081815260200182805461216890613d9b565b80156121b55780601f1061218a576101008083540402835291602001916121b5565b820191906000526020600020905b81548152906001019060200180831161219857829003601f168201915b5050505050905090565b606060008203612206576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061231a565b600082905060005b600082146122385780806122219061429f565b915050600a8261223191906142e7565b915061220e565b60008167ffffffffffffffff81111561225457612253613180565b5b6040519080825280601f01601f1916602001820160405280156122865781602001600182028036833780820191505090505b5090505b600085146123135760018261229f919061412b565b9150600a856122ae9190613e8d565b60306122ba91906138cd565b60f81b8183815181106122d0576122cf613b45565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561230c91906142e7565b945061228a565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b61239b83836125c6565b6123a8600084848461243f565b6123e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123de9061427f565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461242a576124298261279f565b5b6124358383836127ed565b505050565b505050565b60006124608473ffffffffffffffffffffffffffffffffffffffff166128ff565b156125b9578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261248961167e565b8786866040518563ffffffff1660e01b81526004016124ab949392919061436d565b6020604051808303816000875af19250505080156124e757506040513d601f19601f820116820180604052508101906124e491906143ce565b60015b612569573d8060008114612517576040519150601f19603f3d011682016040523d82523d6000602084013e61251c565b606091505b506000815103612561576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125589061427f565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506125be565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161262c90614447565b60405180910390fd5b61263e81611612565b1561267e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612675906144b3565b60405180910390fd5b61268a600083836123ec565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126da91906138cd565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461279b6000838361243a565b5050565b60006127aa82611047565b146127ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e19061451f565b60405180910390fd5b50565b6127f8838383612922565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361283a5761283581612927565b612879565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612878576128778382612970565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036128bb576128b681612add565b6128fa565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146128f9576128f88282612bae565b5b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161297d84611047565b612987919061412b565b9050600060076000848152602001908152602001600020549050818114612a6c576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600880549050612af1919061412b565b9050600060096000848152602001908152602001600020549050600060088381548110612b2157612b20613b45565b5b906000526020600020015490508060088381548110612b4357612b42613b45565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612b9257612b9161453f565b5b6001900381819060005260206000200160009055905550505050565b6000612bb983611047565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b828054612c3990613d9b565b90600052602060002090601f016020900481019282612c5b5760008555612ca2565b82601f10612c7457805160ff1916838001178555612ca2565b82800160010185558215612ca2579182015b82811115612ca1578251825591602001919060010190612c86565b5b509050612caf9190612cb3565b5090565b5b80821115612ccc576000816000905550600101612cb4565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d1981612ce4565b8114612d2457600080fd5b50565b600081359050612d3681612d10565b92915050565b600060208284031215612d5257612d51612cda565b5b6000612d6084828501612d27565b91505092915050565b60008115159050919050565b612d7e81612d69565b82525050565b6000602082019050612d996000830184612d75565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612dd9578082015181840152602081019050612dbe565b83811115612de8576000848401525b50505050565b6000601f19601f8301169050919050565b6000612e0a82612d9f565b612e148185612daa565b9350612e24818560208601612dbb565b612e2d81612dee565b840191505092915050565b60006020820190508181036000830152612e528184612dff565b905092915050565b6000819050919050565b612e6d81612e5a565b8114612e7857600080fd5b50565b600081359050612e8a81612e64565b92915050565b600060208284031215612ea657612ea5612cda565b5b6000612eb484828501612e7b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ee882612ebd565b9050919050565b612ef881612edd565b82525050565b6000602082019050612f136000830184612eef565b92915050565b612f2281612edd565b8114612f2d57600080fd5b50565b600081359050612f3f81612f19565b92915050565b60008060408385031215612f5c57612f5b612cda565b5b6000612f6a85828601612f30565b9250506020612f7b85828601612e7b565b9150509250929050565b612f8e81612d69565b8114612f9957600080fd5b50565b600081359050612fab81612f85565b92915050565b600060208284031215612fc757612fc6612cda565b5b6000612fd584828501612f9c565b91505092915050565b612fe781612e5a565b82525050565b60006020820190506130026000830184612fde565b92915050565b60008060006060848603121561302157613020612cda565b5b600061302f86828701612f30565b935050602061304086828701612f30565b925050604061305186828701612e7b565b9150509250925092565b60006020828403121561307157613070612cda565b5b600061307f84828501612f30565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6130bd81612d69565b82525050565b60006130cf83836130b4565b60208301905092915050565b6000602082019050919050565b60006130f382613088565b6130fd8185613093565b9350613108836130a4565b8060005b8381101561313957815161312088826130c3565b975061312b836130db565b92505060018101905061310c565b5085935050505092915050565b600060408201905061315b6000830185612d75565b818103602083015261316d81846130e8565b90509392505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6131b882612dee565b810181811067ffffffffffffffff821117156131d7576131d6613180565b5b80604052505050565b60006131ea612cd0565b90506131f682826131af565b919050565b600067ffffffffffffffff82111561321657613215613180565b5b61321f82612dee565b9050602081019050919050565b82818337600083830152505050565b600061324e613249846131fb565b6131e0565b90508281526020810184848401111561326a5761326961317b565b5b61327584828561322c565b509392505050565b600082601f83011261329257613291613176565b5b81356132a284826020860161323b565b91505092915050565b6000602082840312156132c1576132c0612cda565b5b600082013567ffffffffffffffff8111156132df576132de612cdf565b5b6132eb8482850161327d565b91505092915050565b6000806040838503121561330b5761330a612cda565b5b600061331985828601612f30565b925050602061332a85828601612f9c565b9150509250929050565b6000819050919050565b600061335961335461334f84612ebd565b613334565b612ebd565b9050919050565b600061336b8261333e565b9050919050565b600061337d82613360565b9050919050565b61338d81613372565b82525050565b60006020820190506133a86000830184613384565b92915050565b600067ffffffffffffffff8211156133c9576133c8613180565b5b6133d282612dee565b9050602081019050919050565b60006133f26133ed846133ae565b6131e0565b90508281526020810184848401111561340e5761340d61317b565b5b61341984828561322c565b509392505050565b600082601f83011261343657613435613176565b5b81356134468482602086016133df565b91505092915050565b6000806000806080858703121561346957613468612cda565b5b600061347787828801612f30565b945050602061348887828801612f30565b935050604061349987828801612e7b565b925050606085013567ffffffffffffffff8111156134ba576134b9612cdf565b5b6134c687828801613421565b91505092959194509250565b600080604083850312156134e9576134e8612cda565b5b60006134f785828601612f30565b925050602061350885828601612f30565b9150509250929050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b600061356e602c83612daa565b915061357982613512565b604082019050919050565b6000602082019050818103600083015261359d81613561565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613600602183612daa565b915061360b826135a4565b604082019050919050565b6000602082019050818103600083015261362f816135f3565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000613692603883612daa565b915061369d82613636565b604082019050919050565b600060208201905081810360008301526136c181613685565b9050919050565b7f4b6f727544616f4e46543a205061757365640000000000000000000000000000600082015250565b60006136fe601283612daa565b9150613709826136c8565b602082019050919050565b6000602082019050818103600083015261372d816136f1565b9050919050565b7f5265737472696374696f6e733a204f6e6c792047656c61746f2072656c617900600082015250565b600061376a601f83612daa565b915061377582613734565b602082019050919050565b600060208201905081810360008301526137998161375d565b9050919050565b7f4d696e745265737472696374696f6e733a2053656e64657220646f6573206e6f60008201527f74206d6565742063726974657269610000000000000000000000000000000000602082015250565b60006137fc602f83612daa565b9150613807826137a0565b604082019050919050565b6000602082019050818103600083015261382b816137ef565b9050919050565b7f4b6f727544616f4e46543a204d617820537570706c7900000000000000000000600082015250565b6000613868601683612daa565b915061387382613832565b602082019050919050565b600060208201905081810360008301526138978161385b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006138d882612e5a565b91506138e383612e5a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156139185761391761389e565b5b828201905092915050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000613959600e83612daa565b915061396482613923565b602082019050919050565b600060208201905081810360008301526139888161394c565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006139eb603183612daa565b91506139f68261398f565b604082019050919050565b60006020820190508181036000830152613a1a816139de565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000613a7d602b83612daa565b9150613a8882613a21565b604082019050919050565b60006020820190508181036000830152613aac81613a70565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000613b0f602c83612daa565b9150613b1a82613ab3565b604082019050919050565b60006020820190508181036000830152613b3e81613b02565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000613bd0602983612daa565b9150613bdb82613b74565b604082019050919050565b60006020820190508181036000830152613bff81613bc3565b9050919050565b600081519050613c1581612e64565b92915050565b600060208284031215613c3157613c30612cda565b5b6000613c3f84828501613c06565b91505092915050565b7f4d696e745265737472696374696f6e733a2057616c6c657420646f6573206e6f60008201527f7420686176652064656661756c742070726f66696c6500000000000000000000602082015250565b6000613ca4603683612daa565b9150613caf82613c48565b604082019050919050565b60006020820190508181036000830152613cd381613c97565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000613d36602a83612daa565b9150613d4182613cda565b604082019050919050565b60006020820190508181036000830152613d6581613d29565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613db357607f821691505b602082108103613dc657613dc5613d6c565b5b50919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000613e28602f83612daa565b9150613e3382613dcc565b604082019050919050565b60006020820190508181036000830152613e5781613e1b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613e9882612e5a565b9150613ea383612e5a565b925082613eb357613eb2613e5e565b5b828206905092915050565b600081905092915050565b6000613ed482612d9f565b613ede8185613ebe565b9350613eee818560208601612dbb565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b6000613f30600583613ebe565b9150613f3b82613efa565b600582019050919050565b6000613f528285613ec9565b9150613f5e8284613ec9565b9150613f6982613f23565b91508190509392505050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613fd1602c83612daa565b9150613fdc82613f75565b604082019050919050565b6000602082019050818103600083015261400081613fc4565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000614063602583612daa565b915061406e82614007565b604082019050919050565b6000602082019050818103600083015261409281614056565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006140f5602483612daa565b915061410082614099565b604082019050919050565b60006020820190508181036000830152614124816140e8565b9050919050565b600061413682612e5a565b915061414183612e5a565b9250828210156141545761415361389e565b5b828203905092915050565b60008151905061416e81612f19565b92915050565b60006020828403121561418a57614189612cda565b5b60006141988482850161415f565b91505092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006141d7601983612daa565b91506141e2826141a1565b602082019050919050565b60006020820190508181036000830152614206816141ca565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614269603283612daa565b91506142748261420d565b604082019050919050565b600060208201905081810360008301526142988161425c565b9050919050565b60006142aa82612e5a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036142dc576142db61389e565b5b600182019050919050565b60006142f282612e5a565b91506142fd83612e5a565b92508261430d5761430c613e5e565b5b828204905092915050565b600081519050919050565b600082825260208201905092915050565b600061433f82614318565b6143498185614323565b9350614359818560208601612dbb565b61436281612dee565b840191505092915050565b60006080820190506143826000830187612eef565b61438f6020830186612eef565b61439c6040830185612fde565b81810360608301526143ae8184614334565b905095945050505050565b6000815190506143c881612d10565b92915050565b6000602082840312156143e4576143e3612cda565b5b60006143f2848285016143b9565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614431602083612daa565b915061443c826143fb565b602082019050919050565b6000602082019050818103600083015261446081614424565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061449d601c83612daa565b91506144a882614467565b602082019050919050565b600060208201905081810360008301526144cc81614490565b9050919050565b7f4b6f727544616f4e46543a204f6e6520706572206163636f756e740000000000600082015250565b6000614509601b83612daa565b9150614514826144d3565b602082019050919050565b60006020820190508181036000830152614538816144fc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122082be447139d03e0772537e1bddb048e19625aeeab758b748cde695293858373564736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80636363141011610104578063a0bcfc7f116100a2578063c631029e11610071578063c631029e1461055a578063c87b56dd14610578578063d5abeb01146105a8578063e985e9c5146105c6576101da565b8063a0bcfc7f146104e8578063a22cb46514610504578063b02cfdc314610520578063b88d4fde1461053e576101da565b806370a08231116100de57806370a082311461045e57806384af9a921461048e57806395d89b41146104ac5780639abc8320146104ca576101da565b806363631410146103f157806366e305fd1461040f5780637072c6b114610440576101da565b806323b872dd1161017c5780634f6ccce71161014b5780634f6ccce714610343578063572b6c05146103735780635c975abb146103a35780636352211e146103c1576101da565b806323b872dd146102bd5780632f745c59146102d95780633552221a1461030957806342842e0e14610327576101da565b8063095ea7b3116101b8578063095ea7b31461025d5780631249c58b1461027957806316c38b3c1461028357806318160ddd1461029f576101da565b806301ffc9a7146101df57806306fdde031461020f578063081812fc1461022d575b600080fd5b6101f960048036038101906101f49190612d3c565b6105f6565b6040516102069190612d84565b60405180910390f35b610217610670565b6040516102249190612e38565b60405180910390f35b61024760048036038101906102429190612e90565b6106ad565b6040516102549190612efe565b60405180910390f35b61027760048036038101906102729190612f45565b610732565b005b610281610849565b005b61029d60048036038101906102989190612fb1565b610a5b565b005b6102a7610aed565b6040516102b49190612fed565b60405180910390f35b6102d760048036038101906102d29190613008565b610afa565b005b6102f360048036038101906102ee9190612f45565b610b5a565b6040516103009190612fed565b60405180910390f35b610311610bff565b60405161031e9190612efe565b60405180910390f35b610341600480360381019061033c9190613008565b610c23565b005b61035d60048036038101906103589190612e90565b610c43565b60405161036a9190612fed565b60405180910390f35b61038d6004803603810190610388919061305b565b610cb4565b60405161039a9190612d84565b60405180910390f35b6103ab610d0c565b6040516103b89190612d84565b60405180910390f35b6103db60048036038101906103d69190612e90565b610d1f565b6040516103e89190612efe565b60405180910390f35b6103f9610dd0565b6040516104069190612fed565b60405180910390f35b6104296004803603810190610424919061305b565b610df4565b604051610437929190613146565b60405180910390f35b610448611023565b6040516104559190612d84565b60405180910390f35b6104786004803603810190610473919061305b565b611047565b6040516104859190612fed565b60405180910390f35b6104966110fe565b6040516104a39190612fed565b60405180910390f35b6104b4611122565b6040516104c19190612e38565b60405180910390f35b6104d261115f565b6040516104df9190612e38565b60405180910390f35b61050260048036038101906104fd91906132ab565b6111ed565b005b61051e600480360381019061051991906132f4565b61127c565b005b610528611292565b6040516105359190613393565b60405180910390f35b6105586004803603810190610553919061344f565b6112b6565b005b610562611318565b60405161056f9190612fed565b60405180910390f35b610592600480360381019061058d9190612e90565b61133c565b60405161059f9190612e38565b60405180910390f35b6105b0611478565b6040516105bd9190612fed565b60405180910390f35b6105e060048036038101906105db91906134d2565b61149c565b6040516105ed9190612d84565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610669575061066882611530565b5b9050919050565b60606040518060400160405280600881526020017f4b6f72752044616f000000000000000000000000000000000000000000000000815250905090565b60006106b882611612565b6106f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ee90613584565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061073d82610d1f565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490613616565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107cc61167e565b73ffffffffffffffffffffffffffffffffffffffff1614806107fb57506107fa816107f561167e565b61149c565b5b61083a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610831906136a8565b60405180910390fd5b61084483836116b0565b505050565b600b60009054906101000a900460ff1615610899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089090613714565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091e90613780565b60405180910390fd5b61092f61167e565b7f0000000000000000000000000000000000000000000000000000000000000000156109a557600061096082610df4565b509050806109a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099a90613812565b60405180910390fd5b505b60006109af610aed565b90507f000000000000000000000000000000000000000000000000000000000000000015610a3a577f00000000000000000000000000000000000000000000000000000000000000008110610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a309061387e565b60405180910390fd5b5b610a57610a4561167e565b600183610a5291906138cd565b611769565b5050565b610a63611787565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac79061396f565b60405180910390fd5b80600b60006101000a81548160ff02191690831515021790555050565b6000600880549050905090565b610b0b610b0561167e565b826117b0565b610b4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4190613a01565b60405180910390fd5b610b5583838361188e565b505050565b6000610b6583611047565b8210610ba6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9d90613a93565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610c3e838383604051806020016040528060008152506112b6565b505050565b6000610c4d610aed565b8210610c8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8590613b25565b60405180910390fd5b60088281548110610ca257610ca1613b45565b5b90600052602060002001549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600b60009054906101000a900460ff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610dc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbe90613be6565b60405180910390fd5b80915050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166392254a62856040518263ffffffff1660e01b8152600401610e539190612efe565b602060405180830381865afa158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e949190613c1b565b905060008103610ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed090613cba565b60405180910390fd5b6000600190506000600467ffffffffffffffff811115610efc57610efb613180565b5b604051908082528060200260200182016040528015610f2a5781602001602082028036833780820191505090505b509050610f3686611af4565b610f6757600181600081518110610f5057610f4f613b45565b5b602002602001019015159081151581525050600091505b610f7086611b99565b610fa157600181600181518110610f8a57610f89613b45565b5b602002602001019015159081151581525050600091505b610faa83611d1c565b610fdb57600181600281518110610fc457610fc3613b45565b5b602002602001019015159081151581525050600091505b610fe483611de7565b61101557600181600381518110610ffe57610ffd613b45565b5b602002602001019015159081151581525050600091505b818194509450505050915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ae90613d4c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606040518060400160405280600781526020017f4b4f525544414f00000000000000000000000000000000000000000000000000815250905090565b600a805461116c90613d9b565b80601f016020809104026020016040519081016040528092919081815260200182805461119890613d9b565b80156111e55780601f106111ba576101008083540402835291602001916111e5565b820191906000526020600020905b8154815290600101906020018083116111c857829003601f168201915b505050505081565b6111f5611787565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611262576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112599061396f565b60405180910390fd5b80600a9080519060200190611278929190612c2d565b5050565b61128e61128761167e565b8383611f65565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6112c76112c161167e565b836117b0565b611306576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fd90613a01565b60405180910390fd5b611312848484846120d1565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606061134782611612565b611386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137d90613e3e565b60405180910390fd5b600061139061212d565b905060007f00000000000000000000000000000000000000000000000000000000000000001580156113e157507f000000000000000000000000000000000000000000000000000000000000000084115b6113eb5783611424565b60017f0000000000000000000000000000000000000000000000000000000000000000856114199190613e8d565b61142391906138cd565b5b90506000825111611444576040518060200160405280600081525061146f565b8161144e826121bf565b60405160200161145f929190613f46565b6040516020818303038152906040525b92505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806115fb57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061160b575061160a8261231f565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600061168933610cb4565b1561169d57601436033560601c90506116ac565b6116a5612389565b90506116ad565b5b90565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661172383610d1f565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611783828260405180602001604052806000815250612391565b5050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b60006117bb82611612565b6117fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f190613fe7565b60405180910390fd5b600061180583610d1f565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061187457508373ffffffffffffffffffffffffffffffffffffffff1661185c846106ad565b73ffffffffffffffffffffffffffffffffffffffff16145b806118855750611884818561149c565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166118ae82610d1f565b73ffffffffffffffffffffffffffffffffffffffff1614611904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fb90614079565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196a9061410b565b60405180910390fd5b61197e8383836123ec565b6119896000826116b0565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119d9919061412b565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a3091906138cd565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611aef83838361243a565b505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401611b509190612efe565b602060405180830381865afa158015611b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b919190613c1b565b119050919050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9ec65637f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611c159190612fed565b602060405180830381865afa158015611c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c569190614174565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c96576000915050611d17565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401611cd19190612efe565b602060405180830381865afa158015611cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d129190613c1b565b119150505b919050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633a15ff07846040518263ffffffff1660e01b8152600401611d789190612fed565b602060405180830381865afa158015611d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db99190613c1b565b90507f0000000000000000000000000000000000000000000000000000000000000000811015915050919050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9ec6563846040518263ffffffff1660e01b8152600401611e439190612fed565b602060405180830381865afa158015611e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e849190614174565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611ec4576000915050611f60565b60008173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f359190613c1b565b90507f0000000000000000000000000000000000000000000000000000000000000000811015925050505b919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611fd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fca906141ed565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516120c49190612d84565b60405180910390a3505050565b6120dc84848461188e565b6120e88484848461243f565b612127576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211e9061427f565b60405180910390fd5b50505050565b6060600a805461213c90613d9b565b80601f016020809104026020016040519081016040528092919081815260200182805461216890613d9b565b80156121b55780601f1061218a576101008083540402835291602001916121b5565b820191906000526020600020905b81548152906001019060200180831161219857829003601f168201915b5050505050905090565b606060008203612206576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061231a565b600082905060005b600082146122385780806122219061429f565b915050600a8261223191906142e7565b915061220e565b60008167ffffffffffffffff81111561225457612253613180565b5b6040519080825280601f01601f1916602001820160405280156122865781602001600182028036833780820191505090505b5090505b600085146123135760018261229f919061412b565b9150600a856122ae9190613e8d565b60306122ba91906138cd565b60f81b8183815181106122d0576122cf613b45565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561230c91906142e7565b945061228a565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b61239b83836125c6565b6123a8600084848461243f565b6123e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123de9061427f565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461242a576124298261279f565b5b6124358383836127ed565b505050565b505050565b60006124608473ffffffffffffffffffffffffffffffffffffffff166128ff565b156125b9578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261248961167e565b8786866040518563ffffffff1660e01b81526004016124ab949392919061436d565b6020604051808303816000875af19250505080156124e757506040513d601f19601f820116820180604052508101906124e491906143ce565b60015b612569573d8060008114612517576040519150601f19603f3d011682016040523d82523d6000602084013e61251c565b606091505b506000815103612561576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125589061427f565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506125be565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161262c90614447565b60405180910390fd5b61263e81611612565b1561267e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612675906144b3565b60405180910390fd5b61268a600083836123ec565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126da91906138cd565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461279b6000838361243a565b5050565b60006127aa82611047565b146127ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e19061451f565b60405180910390fd5b50565b6127f8838383612922565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361283a5761283581612927565b612879565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612878576128778382612970565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036128bb576128b681612add565b6128fa565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146128f9576128f88282612bae565b5b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161297d84611047565b612987919061412b565b9050600060076000848152602001908152602001600020549050818114612a6c576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600880549050612af1919061412b565b9050600060096000848152602001908152602001600020549050600060088381548110612b2157612b20613b45565b5b906000526020600020015490508060088381548110612b4357612b42613b45565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612b9257612b9161453f565b5b6001900381819060005260206000200160009055905550505050565b6000612bb983611047565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b828054612c3990613d9b565b90600052602060002090601f016020900481019282612c5b5760008555612ca2565b82601f10612c7457805160ff1916838001178555612ca2565b82800160010185558215612ca2579182015b82811115612ca1578251825591602001919060010190612c86565b5b509050612caf9190612cb3565b5090565b5b80821115612ccc576000816000905550600101612cb4565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d1981612ce4565b8114612d2457600080fd5b50565b600081359050612d3681612d10565b92915050565b600060208284031215612d5257612d51612cda565b5b6000612d6084828501612d27565b91505092915050565b60008115159050919050565b612d7e81612d69565b82525050565b6000602082019050612d996000830184612d75565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612dd9578082015181840152602081019050612dbe565b83811115612de8576000848401525b50505050565b6000601f19601f8301169050919050565b6000612e0a82612d9f565b612e148185612daa565b9350612e24818560208601612dbb565b612e2d81612dee565b840191505092915050565b60006020820190508181036000830152612e528184612dff565b905092915050565b6000819050919050565b612e6d81612e5a565b8114612e7857600080fd5b50565b600081359050612e8a81612e64565b92915050565b600060208284031215612ea657612ea5612cda565b5b6000612eb484828501612e7b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ee882612ebd565b9050919050565b612ef881612edd565b82525050565b6000602082019050612f136000830184612eef565b92915050565b612f2281612edd565b8114612f2d57600080fd5b50565b600081359050612f3f81612f19565b92915050565b60008060408385031215612f5c57612f5b612cda565b5b6000612f6a85828601612f30565b9250506020612f7b85828601612e7b565b9150509250929050565b612f8e81612d69565b8114612f9957600080fd5b50565b600081359050612fab81612f85565b92915050565b600060208284031215612fc757612fc6612cda565b5b6000612fd584828501612f9c565b91505092915050565b612fe781612e5a565b82525050565b60006020820190506130026000830184612fde565b92915050565b60008060006060848603121561302157613020612cda565b5b600061302f86828701612f30565b935050602061304086828701612f30565b925050604061305186828701612e7b565b9150509250925092565b60006020828403121561307157613070612cda565b5b600061307f84828501612f30565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6130bd81612d69565b82525050565b60006130cf83836130b4565b60208301905092915050565b6000602082019050919050565b60006130f382613088565b6130fd8185613093565b9350613108836130a4565b8060005b8381101561313957815161312088826130c3565b975061312b836130db565b92505060018101905061310c565b5085935050505092915050565b600060408201905061315b6000830185612d75565b818103602083015261316d81846130e8565b90509392505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6131b882612dee565b810181811067ffffffffffffffff821117156131d7576131d6613180565b5b80604052505050565b60006131ea612cd0565b90506131f682826131af565b919050565b600067ffffffffffffffff82111561321657613215613180565b5b61321f82612dee565b9050602081019050919050565b82818337600083830152505050565b600061324e613249846131fb565b6131e0565b90508281526020810184848401111561326a5761326961317b565b5b61327584828561322c565b509392505050565b600082601f83011261329257613291613176565b5b81356132a284826020860161323b565b91505092915050565b6000602082840312156132c1576132c0612cda565b5b600082013567ffffffffffffffff8111156132df576132de612cdf565b5b6132eb8482850161327d565b91505092915050565b6000806040838503121561330b5761330a612cda565b5b600061331985828601612f30565b925050602061332a85828601612f9c565b9150509250929050565b6000819050919050565b600061335961335461334f84612ebd565b613334565b612ebd565b9050919050565b600061336b8261333e565b9050919050565b600061337d82613360565b9050919050565b61338d81613372565b82525050565b60006020820190506133a86000830184613384565b92915050565b600067ffffffffffffffff8211156133c9576133c8613180565b5b6133d282612dee565b9050602081019050919050565b60006133f26133ed846133ae565b6131e0565b90508281526020810184848401111561340e5761340d61317b565b5b61341984828561322c565b509392505050565b600082601f83011261343657613435613176565b5b81356134468482602086016133df565b91505092915050565b6000806000806080858703121561346957613468612cda565b5b600061347787828801612f30565b945050602061348887828801612f30565b935050604061349987828801612e7b565b925050606085013567ffffffffffffffff8111156134ba576134b9612cdf565b5b6134c687828801613421565b91505092959194509250565b600080604083850312156134e9576134e8612cda565b5b60006134f785828601612f30565b925050602061350885828601612f30565b9150509250929050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b600061356e602c83612daa565b915061357982613512565b604082019050919050565b6000602082019050818103600083015261359d81613561565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613600602183612daa565b915061360b826135a4565b604082019050919050565b6000602082019050818103600083015261362f816135f3565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000613692603883612daa565b915061369d82613636565b604082019050919050565b600060208201905081810360008301526136c181613685565b9050919050565b7f4b6f727544616f4e46543a205061757365640000000000000000000000000000600082015250565b60006136fe601283612daa565b9150613709826136c8565b602082019050919050565b6000602082019050818103600083015261372d816136f1565b9050919050565b7f5265737472696374696f6e733a204f6e6c792047656c61746f2072656c617900600082015250565b600061376a601f83612daa565b915061377582613734565b602082019050919050565b600060208201905081810360008301526137998161375d565b9050919050565b7f4d696e745265737472696374696f6e733a2053656e64657220646f6573206e6f60008201527f74206d6565742063726974657269610000000000000000000000000000000000602082015250565b60006137fc602f83612daa565b9150613807826137a0565b604082019050919050565b6000602082019050818103600083015261382b816137ef565b9050919050565b7f4b6f727544616f4e46543a204d617820537570706c7900000000000000000000600082015250565b6000613868601683612daa565b915061387382613832565b602082019050919050565b600060208201905081810360008301526138978161385b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006138d882612e5a565b91506138e383612e5a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156139185761391761389e565b5b828201905092915050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000613959600e83612daa565b915061396482613923565b602082019050919050565b600060208201905081810360008301526139888161394c565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006139eb603183612daa565b91506139f68261398f565b604082019050919050565b60006020820190508181036000830152613a1a816139de565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000613a7d602b83612daa565b9150613a8882613a21565b604082019050919050565b60006020820190508181036000830152613aac81613a70565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000613b0f602c83612daa565b9150613b1a82613ab3565b604082019050919050565b60006020820190508181036000830152613b3e81613b02565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000613bd0602983612daa565b9150613bdb82613b74565b604082019050919050565b60006020820190508181036000830152613bff81613bc3565b9050919050565b600081519050613c1581612e64565b92915050565b600060208284031215613c3157613c30612cda565b5b6000613c3f84828501613c06565b91505092915050565b7f4d696e745265737472696374696f6e733a2057616c6c657420646f6573206e6f60008201527f7420686176652064656661756c742070726f66696c6500000000000000000000602082015250565b6000613ca4603683612daa565b9150613caf82613c48565b604082019050919050565b60006020820190508181036000830152613cd381613c97565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000613d36602a83612daa565b9150613d4182613cda565b604082019050919050565b60006020820190508181036000830152613d6581613d29565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613db357607f821691505b602082108103613dc657613dc5613d6c565b5b50919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000613e28602f83612daa565b9150613e3382613dcc565b604082019050919050565b60006020820190508181036000830152613e5781613e1b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613e9882612e5a565b9150613ea383612e5a565b925082613eb357613eb2613e5e565b5b828206905092915050565b600081905092915050565b6000613ed482612d9f565b613ede8185613ebe565b9350613eee818560208601612dbb565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b6000613f30600583613ebe565b9150613f3b82613efa565b600582019050919050565b6000613f528285613ec9565b9150613f5e8284613ec9565b9150613f6982613f23565b91508190509392505050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613fd1602c83612daa565b9150613fdc82613f75565b604082019050919050565b6000602082019050818103600083015261400081613fc4565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000614063602583612daa565b915061406e82614007565b604082019050919050565b6000602082019050818103600083015261409281614056565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006140f5602483612daa565b915061410082614099565b604082019050919050565b60006020820190508181036000830152614124816140e8565b9050919050565b600061413682612e5a565b915061414183612e5a565b9250828210156141545761415361389e565b5b828203905092915050565b60008151905061416e81612f19565b92915050565b60006020828403121561418a57614189612cda565b5b60006141988482850161415f565b91505092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006141d7601983612daa565b91506141e2826141a1565b602082019050919050565b60006020820190508181036000830152614206816141ca565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614269603283612daa565b91506142748261420d565b604082019050919050565b600060208201905081810360008301526142988161425c565b9050919050565b60006142aa82612e5a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036142dc576142db61389e565b5b600182019050919050565b60006142f282612e5a565b91506142fd83612e5a565b92508261430d5761430c613e5e565b5b828204905092915050565b600081519050919050565b600082825260208201905092915050565b600061433f82614318565b6143498185614323565b9350614359818560208601612dbb565b61436281612dee565b840191505092915050565b60006080820190506143826000830187612eef565b61438f6020830186612eef565b61439c6040830185612fde565b81810360608301526143ae8184614334565b905095945050505050565b6000815190506143c881612d10565b92915050565b6000602082840312156143e4576143e3612cda565b5b60006143f2848285016143b9565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614431602083612daa565b915061443c826143fb565b602082019050919050565b6000602082019050818103600083015261446081614424565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061449d601c83612daa565b91506144a882614467565b602082019050919050565b600060208201905081810360008301526144cc81614490565b9050919050565b7f4b6f727544616f4e46543a204f6e6520706572206163636f756e740000000000600082015250565b6000614509601b83612daa565b9150614514826144d3565b602082019050919050565b60006020820190508181036000830152614538816144fc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122082be447139d03e0772537e1bddb048e19625aeeab758b748cde695293858373564736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2188,
        "contract": "contracts/KoruDaoNFT.sol:KoruDaoNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2190,
        "contract": "contracts/KoruDaoNFT.sol:KoruDaoNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2194,
        "contract": "contracts/KoruDaoNFT.sol:KoruDaoNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2198,
        "contract": "contracts/KoruDaoNFT.sol:KoruDaoNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2202,
        "contract": "contracts/KoruDaoNFT.sol:KoruDaoNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2208,
        "contract": "contracts/KoruDaoNFT.sol:KoruDaoNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3048,
        "contract": "contracts/KoruDaoNFT.sol:KoruDaoNFT",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3052,
        "contract": "contracts/KoruDaoNFT.sol:KoruDaoNFT",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3055,
        "contract": "contracts/KoruDaoNFT.sol:KoruDaoNFT",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3059,
        "contract": "contracts/KoruDaoNFT.sol:KoruDaoNFT",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 853,
        "contract": "contracts/KoruDaoNFT.sol:KoruDaoNFT",
        "label": "baseUri",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 855,
        "contract": "contracts/KoruDaoNFT.sol:KoruDaoNFT",
        "label": "paused",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
