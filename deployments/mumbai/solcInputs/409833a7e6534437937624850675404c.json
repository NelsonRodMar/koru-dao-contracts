{
  "language": "Solidity",
  "sources": {
    "contracts/KoruDaoRelayTransit.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.14;\n\nimport {Signatures} from \"./Signatures.sol\";\nimport {DataTypes} from \"./libraries/LensDataTypes.sol\";\nimport {_transfer, ETH} from \"./functions/FUtils.sol\";\nimport {IKoruDao} from \"./interfaces/IKoruDao.sol\";\nimport {IKoruDaoNFT} from \"./interfaces/IKoruDaoNFT.sol\";\n\n//solhint-disable no-empty-blocks\n//solhint-disable not-rely-on-time\ncontract KoruDaoRelayTransit is Signatures {\n    uint256 public immutable maxFee;\n    address public immutable gelatoRelay;\n    address public immutable koruDao;\n    address public immutable koruDaoNFT;\n    mapping(address => uint256) public nonces;\n\n    event LogPost(address user, uint256 fee, uint256 time);\n    event LogMint(address user, uint256 fee, uint256 time);\n\n    modifier onlyGelatoRelay() {\n        require(msg.sender == gelatoRelay, \"Signatures: Only gelato relay\");\n        _;\n    }\n\n    constructor(\n        uint256 _maxFee,\n        address _gelatoRelay,\n        address _koruDao,\n        address _koruDaoNFT\n    ) {\n        maxFee = _maxFee;\n        gelatoRelay = _gelatoRelay;\n        koruDao = _koruDao;\n        koruDaoNFT = _koruDaoNFT;\n    }\n\n    receive() external payable {}\n\n    function post(\n        address _user,\n        uint256 _fee,\n        DataTypes.PostData calldata _postVars,\n        EIP712Signature calldata _sig\n    ) external onlyGelatoRelay {\n        unchecked {\n            _validateRecoveredAddress(\n                _calculateDigest(\n                    keccak256(\n                        abi.encode(\n                            POST_WITH_SIG_TYPEHASH,\n                            _user,\n                            nonces[_user]++,\n                            _sig.deadline,\n                            _postVars.profileId,\n                            keccak256(bytes(_postVars.contentURI)),\n                            _postVars.collectModule,\n                            keccak256(_postVars.collectModuleInitData),\n                            _postVars.referenceModule,\n                            keccak256(_postVars.referenceModuleInitData)\n                        )\n                    )\n                ),\n                _user,\n                _sig\n            );\n        }\n\n        _post(_user, _postVars);\n\n        uint256 feeUsed = _payRelayFee(_fee);\n\n        emit LogPost(_user, feeUsed, block.timestamp);\n    }\n\n    function mint(\n        address _user,\n        uint256 _fee,\n        EIP712Signature calldata _sig\n    ) external onlyGelatoRelay {\n        unchecked {\n            _validateRecoveredAddress(\n                _calculateDigest(\n                    keccak256(\n                        abi.encode(\n                            MINT_WITH_SIG_TYPEHASH,\n                            _user,\n                            nonces[_user]++,\n                            _sig.deadline\n                        )\n                    )\n                ),\n                _user,\n                _sig\n            );\n        }\n\n        _mint(_user);\n\n        uint256 feeUsed = _payRelayFee(_fee);\n\n        emit LogMint(_user, feeUsed, block.timestamp);\n    }\n\n    function _post(address _user, DataTypes.PostData calldata _postVars)\n        private\n    {\n        bytes memory postData = abi.encodeWithSelector(\n            IKoruDao.post.selector,\n            _postVars\n        );\n\n        (bool success, ) = koruDao.call(abi.encode(postData, _user));\n\n        require(success, \"Signatures: post: failed\");\n    }\n\n    function _mint(address _user) private {\n        (bool success, ) = koruDaoNFT.call(\n            abi.encode(IKoruDaoNFT.mint.selector, _user)\n        );\n\n        require(success, \"Signatures: mint: failed\");\n    }\n\n    function _payRelayFee(uint256 _fee) private returns (uint256 feeUsed) {\n        feeUsed = _fee > maxFee || _fee == 0 ? maxFee : _fee;\n\n        _transfer(payable(gelatoRelay), ETH, feeUsed);\n    }\n}\n"
    },
    "contracts/Signatures.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.14;\n\n//solhint-disable private-vars-leading-underscore\n//solhint-disable max-line-length\n//solhint-disable not-rely-on-time\nabstract contract Signatures {\n    struct EIP712Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        uint256 deadline;\n    }\n\n    bytes32 internal constant EIP712_NAME_HASH =\n        keccak256(\"KoruDaoRelayTransit\");\n    bytes32 internal constant EIP712_VERSION_HASH = keccak256(\"1\");\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\n        keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n\n    bytes32 internal constant MINT_WITH_SIG_TYPEHASH =\n        keccak256(\"Mint(address user,uint256 nonce,uint256 deadline)\");\n    bytes32 internal constant POST_WITH_SIG_TYPEHASH =\n        keccak256(\n            \"Post(address user,uint256 nonce,uint256 deadline,uint256 profileId,string contentURI,address collectModule,bytes collectModuleInitData,address referenceModule,bytes referenceModuleInitData)\"\n        );\n\n    function _validateRecoveredAddress(\n        bytes32 digest,\n        address expectedAddress,\n        EIP712Signature calldata sig\n    ) internal view {\n        require(sig.deadline >= block.timestamp, \"Signatures: expired\");\n\n        address recoveredAddress = ecrecover(digest, sig.v, sig.r, sig.s);\n\n        require(\n            recoveredAddress == expectedAddress &&\n                recoveredAddress != address(0),\n            \"Signatures: invalid\"\n        );\n    }\n\n    function _calculateDomainSeparator() internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    EIP712_DOMAIN_TYPEHASH,\n                    EIP712_NAME_HASH,\n                    EIP712_VERSION_HASH,\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    function _calculateDigest(bytes32 hashedMessage)\n        internal\n        view\n        returns (bytes32)\n    {\n        bytes32 digest;\n        unchecked {\n            digest = keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    _calculateDomainSeparator(),\n                    hashedMessage\n                )\n            );\n        }\n        return digest;\n    }\n}\n"
    },
    "contracts/libraries/LensDataTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.14;\n\n/**\n * @title DataTypes\n * @author Lens Protocol\n *\n * @notice A standard library of data types used throughout the Lens Protocol.\n */\nlibrary DataTypes {\n    /**\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\n     *\n     * @param Unpaused The fully unpaused state.\n     * @param PublishingPaused The state where only publication creation functions are paused.\n     * @param Paused The fully paused state.\n     */\n    enum ProtocolState {\n        Unpaused,\n        PublishingPaused,\n        Paused\n    }\n\n    /**\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\n     *\n     * @param Post A standard post, having a URI, a collect module but no pointer to another publication.\n     * @param Comment A comment, having a URI, a collect module and a pointer to another publication.\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or collect module.\n     * @param Nonexistent An indicator showing the queried publication does not exist.\n     */\n    enum PubType {\n        Post,\n        Comment,\n        Mirror,\n        Nonexistent\n    }\n\n    /**\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\n     *\n     * @param v The signature's recovery parameter.\n     * @param r The signature's r parameter.\n     * @param s The signature's s parameter\n     * @param deadline The signature's deadline\n     */\n    struct EIP712Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        uint256 deadline;\n    }\n\n    /**\n     * @notice A struct containing profile data.\n     *\n     * @param pubCount The number of publications made to this profile.\n     * @param followModule The address of the current follow module in use by this profile, can be empty.\n     * @param followNFT The address of the followNFT associated with this profile, can be empty..\n     * @param handle The profile's associated handle.\n     * @param imageURI The URI to be used for the profile's image.\n     * @param followNFTURI The URI to be used for the follow NFT.\n     */\n    struct ProfileStruct {\n        uint256 pubCount;\n        address followModule;\n        address followNFT;\n        string handle;\n        string imageURI;\n        string followNFTURI;\n    }\n\n    /**\n     * @notice A struct containing data associated with each new publication.\n     *\n     * @param profileIdPointed The profile token ID this publication points to, for mirrors and comments.\n     * @param pubIdPointed The publication ID this publication points to, for mirrors and comments.\n     * @param contentURI The URI associated with this publication.\n     * @param referenceModule The address of the current reference module in use by this profile, can be empty.\n     * @param collectModule The address of the collect module associated with this publication, this exists for all publication.\n     * @param collectNFT The address of the collectNFT associated with this publication, if any.\n     */\n    struct PublicationStruct {\n        uint256 profileIdPointed;\n        uint256 pubIdPointed;\n        string contentURI;\n        address referenceModule;\n        address collectModule;\n        address collectNFT;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `createProfile()` function.\n     *\n     * @param to The address receiving the profile.\n     * @param handle The handle to set for the profile, must be unique and non-empty.\n     * @param imageURI The URI to set for the profile image.\n     * @param followModule The follow module to use, can be the zero address.\n     * @param followModuleInitData The follow module initialization data, if any.\n     * @param followNFTURI The URI to use for the follow NFT.\n     */\n    struct CreateProfileData {\n        address to;\n        string handle;\n        string imageURI;\n        address followModule;\n        bytes followModuleInitData;\n        string followNFTURI;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setDefaultProfileWithSig()` function. Parameters are\n     * the same as the regular `setDefaultProfile()` function, with an added EIP712Signature.\n     *\n     * @param wallet The address of the wallet setting the default profile.\n     * @param profileId The token ID of the profile which will be set as default, or zero.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct SetDefaultProfileWithSigData {\n        address wallet;\n        uint256 profileId;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setFollowModuleWithSig()` function. Parameters are\n     * the same as the regular `setFollowModule()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to change the followModule for.\n     * @param followModule The followModule to set for the given profile, must be whitelisted.\n     * @param followModuleInitData The data to be passed to the followModule for initialization.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct SetFollowModuleWithSigData {\n        uint256 profileId;\n        address followModule;\n        bytes followModuleInitData;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setDispatcherWithSig()` function. Parameters are the same\n     * as the regular `setDispatcher()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to set the dispatcher for.\n     * @param dispatcher The dispatcher address to set for the profile.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct SetDispatcherWithSigData {\n        uint256 profileId;\n        address dispatcher;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setProfileImageURIWithSig()` function. Parameters are the same\n     * as the regular `setProfileImageURI()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to set the URI for.\n     * @param imageURI The URI to set for the given profile image.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct SetProfileImageURIWithSigData {\n        uint256 profileId;\n        string imageURI;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setFollowNFTURIWithSig()` function. Parameters are the same\n     * as the regular `setFollowNFTURI()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\n     * @param followNFTURI The follow NFT URI to set.\n     * @param sig The EIP712Signature struct containing the followNFT's associated profile owner's signature.\n     */\n    struct SetFollowNFTURIWithSigData {\n        uint256 profileId;\n        string followNFTURI;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `post()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param collectModule The collect module to set for this new publication.\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct PostData {\n        uint256 profileId;\n        string contentURI;\n        address collectModule;\n        bytes collectModuleInitData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `postWithSig()` function. Parameters are the same as\n     * the regular `post()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param collectModule The collectModule to set for this new publication.\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct PostWithSigData {\n        uint256 profileId;\n        string contentURI;\n        address collectModule;\n        bytes collectModuleInitData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `comment()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param profileIdPointed The profile token ID to point the comment to.\n     * @param pubIdPointed The publication ID to point the comment to.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param collectModule The collect module to set for this new publication.\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct CommentData {\n        uint256 profileId;\n        string contentURI;\n        uint256 profileIdPointed;\n        uint256 pubIdPointed;\n        bytes referenceModuleData;\n        address collectModule;\n        bytes collectModuleInitData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `commentWithSig()` function. Parameters are the same as\n     * the regular `comment()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param profileIdPointed The profile token ID to point the comment to.\n     * @param pubIdPointed The publication ID to point the comment to.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param collectModule The collectModule to set for this new publication.\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct CommentWithSigData {\n        uint256 profileId;\n        string contentURI;\n        uint256 profileIdPointed;\n        uint256 pubIdPointed;\n        bytes referenceModuleData;\n        address collectModule;\n        bytes collectModuleInitData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `mirror()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param profileIdPointed The profile token ID to point the mirror to.\n     * @param pubIdPointed The publication ID to point the mirror to.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct MirrorData {\n        uint256 profileId;\n        uint256 profileIdPointed;\n        uint256 pubIdPointed;\n        bytes referenceModuleData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `mirrorWithSig()` function. Parameters are the same as\n     * the regular `mirror()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param profileIdPointed The profile token ID to point the mirror to.\n     * @param pubIdPointed The publication ID to point the mirror to.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct MirrorWithSigData {\n        uint256 profileId;\n        uint256 profileIdPointed;\n        uint256 pubIdPointed;\n        bytes referenceModuleData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `followWithSig()` function. Parameters are the same\n     * as the regular `follow()` function, with the follower's (signer) address and an EIP712Signature added.\n     *\n     * @param follower The follower which is the message signer.\n     * @param profileIds The array of token IDs of the profiles to follow.\n     * @param datas The array of arbitrary data to pass to the followModules if needed.\n     * @param sig The EIP712Signature struct containing the follower's signature.\n     */\n    struct FollowWithSigData {\n        address follower;\n        uint256[] profileIds;\n        bytes[] datas;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `collectWithSig()` function. Parameters are the same as\n     * the regular `collect()` function, with the collector's (signer) address and an EIP712Signature added.\n     *\n     * @param collector The collector which is the message signer.\n     * @param profileId The token ID of the profile that published the publication to collect.\n     * @param pubId The publication to collect's publication ID.\n     * @param data The arbitrary data to pass to the collectModule if needed.\n     * @param sig The EIP712Signature struct containing the collector's signature.\n     */\n    struct CollectWithSigData {\n        address collector;\n        uint256 profileId;\n        uint256 pubId;\n        bytes data;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setProfileMetadataWithSig()` function.\n     *\n     * @param profileId The profile ID for which to set the metadata.\n     * @param metadata The metadata string to set for the profile and user.\n     * @param sig The EIP712Signature struct containing the user's signature.\n     */\n    struct SetProfileMetadataWithSigData {\n        uint256 profileId;\n        string metadata;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `toggleFollowWithSig()` function.\n     *\n     * @param follower The follower which is the message signer.\n     * @param profileIds The token ID array of the profiles.\n     * @param enables The array of booleans to enable/disable follows.\n     * @param sig The EIP712Signature struct containing the follower's signature.\n     */\n    struct ToggleFollowWithSigData {\n        address follower;\n        uint256[] profileIds;\n        bool[] enables;\n        EIP712Signature sig;\n    }\n}\n"
    },
    "contracts/functions/FUtils.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.12;\n\nimport {\n    SafeERC20,\n    IERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n// solhint-disable private-vars-leading-underscore\n// solhint-disable func-visibility\nfunction _transfer(\n    address payable _to,\n    address _paymentToken,\n    uint256 _amount\n) {\n    if (_paymentToken == ETH) {\n        (bool success, ) = _to.call{value: _amount}(\"\");\n        require(success, \"_transfer: ETH transfer failed\");\n    } else {\n        SafeERC20.safeTransfer(IERC20(_paymentToken), _to, _amount);\n    }\n}\n"
    },
    "contracts/interfaces/IKoruDao.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.14;\n\nimport {DataTypes} from \"../libraries/LensDataTypes.sol\";\n\ninterface IKoruDao {\n    function post(DataTypes.PostData calldata _vars) external;\n}\n"
    },
    "contracts/interfaces/IKoruDaoNFT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.14;\n\ninterface IKoruDaoNFT {\n    function mint() external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
