{
  "address": "0xb0FbFDC52f372a4D0d4e65612224E98826EBF834",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postInterval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_gelatoRelay",
          "type": "address"
        },
        {
          "internalType": "contract IERC721MetaTxEnumerable",
          "name": "_koruDaoNft",
          "type": "address"
        },
        {
          "internalType": "contract ILensHub",
          "name": "_lensHub",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "LogPost",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_token",
          "type": "uint256"
        }
      ],
      "name": "canPost",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "koruDaoNft",
      "outputs": [
        {
          "internalType": "contract IERC721MetaTxEnumerable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastPost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lensHub",
      "outputs": [
        {
          "internalType": "contract ILensHub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "contentURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "collectModule",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "collectModuleInitData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "referenceModule",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "referenceModuleInitData",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataTypes.PostData",
          "name": "_postVars",
          "type": "tuple"
        }
      ],
      "name": "post",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_profileId",
          "type": "uint256"
        }
      ],
      "name": "setDefaultProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d39d923f3b9f4753c599ae031ac6350ad88e8f205fb2c94faca78104ce07c04",
  "receipt": {
    "to": null,
    "from": "0xCDf41a135C65d0013393B3793F92b4FAF31032d0",
    "contractAddress": "0xb0FbFDC52f372a4D0d4e65612224E98826EBF834",
    "transactionIndex": 67,
    "gasUsed": "1059994",
    "logsBloom": "0x
    "blockHash": "0xe9350f5de0991bd02da3f80604fee834e4cd2a7e55c345f8166ccc149cc71987",
    "transactionHash": "0x3d39d923f3b9f4753c599ae031ac6350ad88e8f205fb2c94faca78104ce07c04",
    "logs": [
      {
        "transactionIndex": 67,
        "blockNumber": 36569103,
        "transactionHash": "0x3d39d923f3b9f4753c599ae031ac6350ad88e8f205fb2c94faca78104ce07c04",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cdf41a135c65d0013393b3793f92b4faf31032d0",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000088ee3f7e5c2ad00000000000000000000000000000000000000000000000001078ccc2dc38f2ff0000000000000000000000000000000000000000000082a302aed57d15de525a0000000000000000000000000000000000000000000000000fefde835ddcc82f0000000000000000000000000000000000000000000082a30337c3bc943a7d2a",
        "logIndex": 298,
        "blockHash": "0xe9350f5de0991bd02da3f80604fee834e4cd2a7e55c345f8166ccc149cc71987"
      }
    ],
    "blockNumber": 36569103,
    "cumulativeGasUsed": "13374225",
    "status": 1,
    "byzantium": true
  },
  "args": [
    86400,
    "0xcEDdF46A0B2AFBFEeD1E27ebD99CB804E03706B3",
    "0x3Fc16819b0271Ad887BE36885b58Cff37117Ec79",
    "0xDb46d1Dc155634FbC732f92E853b10B288AD5a1d"
  ],
  "numDeployments": 6,
  "solcInputHash": "86180d6184d359953566e0a595ede7a8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postInterval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gelatoRelay\",\"type\":\"address\"},{\"internalType\":\"contract IERC721MetaTxEnumerable\",\"name\":\"_koruDaoNft\",\"type\":\"address\"},{\"internalType\":\"contract ILensHub\",\"name\":\"_lensHub\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogPost\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"canPost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"koruDaoNft\",\"outputs\":[{\"internalType\":\"contract IERC721MetaTxEnumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastPost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lensHub\",\"outputs\":[{\"internalType\":\"contract ILensHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"collectModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"collectModuleInitData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"referenceModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"referenceModuleInitData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.PostData\",\"name\":\"_postVars\",\"type\":\"tuple\"}],\"name\":\"post\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profileId\",\"type\":\"uint256\"}],\"name\":\"setDefaultProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KoruDao.sol\":\"KoruDao\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x84690ebda74336bdda266a1c10e4edb5e2488bf2ab018cfc0cf11693b743dff6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/KoruDao.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport {\\n    ERC2771Context\\n} from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport {\\n    ERC721Holder\\n} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {Proxied} from \\\"./vendor/proxy/EIP173/Proxied.sol\\\";\\nimport {DataTypes} from \\\"./libraries/LensDataTypes.sol\\\";\\nimport {IERC721MetaTxEnumerable} from \\\"./vendor/oz/IERC721MetaTxEnumerable.sol\\\";\\nimport {ILensHub} from \\\"./interfaces/ILensHub.sol\\\";\\n\\n//solhint-disable not-rely-on-time\\ncontract KoruDao is ERC721Holder, ERC2771Context, Proxied {\\n    uint256 public immutable postInterval;\\n    IERC721MetaTxEnumerable public immutable koruDaoNft;\\n    ILensHub public immutable lensHub;\\n    mapping(uint256 => uint256) public lastPost;\\n\\n    event LogPost(\\n        address indexed user,\\n        uint256 indexed token,\\n        uint256 indexed pubId,\\n        uint256 time\\n    );\\n\\n    modifier onlyGelatoRelay() {\\n        require(isTrustedForwarder(msg.sender), \\\"KoruDao: Only GelatoRelay\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 _postInterval,\\n        address _gelatoRelay,\\n        IERC721MetaTxEnumerable _koruDaoNft,\\n        ILensHub _lensHub\\n    ) ERC2771Context(_gelatoRelay) {\\n        postInterval = _postInterval;\\n        koruDaoNft = _koruDaoNft;\\n        lensHub = _lensHub;\\n    }\\n\\n    function post(DataTypes.PostData calldata _postVars)\\n        external\\n        onlyGelatoRelay\\n    {\\n        address msgSender = _msgSender();\\n\\n        require(koruDaoNft.balanceOf(msgSender) > 0, \\\"KoruDao: No KoruDaoNft\\\");\\n\\n        uint256 token = koruDaoNft.tokenOfOwnerByIndex(msgSender, 0);\\n\\n        require(canPost(token), \\\"KoruDao: Post too frequent\\\");\\n\\n        uint256 pubId = lensHub.post(_postVars);\\n\\n        lastPost[token] = block.timestamp;\\n\\n        emit LogPost(msgSender, token, pubId, block.timestamp);\\n    }\\n\\n    function setDefaultProfile(uint256 _profileId) external onlyProxyAdmin {\\n        lensHub.setDefaultProfile(_profileId);\\n    }\\n\\n    function canPost(uint256 _token) public view returns (bool) {\\n        if (block.timestamp - lastPost[_token] >= postInterval) return true;\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x994cb1c5838cb0ed4473a309c926103db5ddc37ad346ab30ae4923ca29d445f1\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ILensHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {DataTypes} from \\\"../libraries/LensDataTypes.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title ILensHub\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the LensHub contract, the main entry point for the Lens Protocol.\\n * You'll find all the events and external functions, as well as the reasoning behind them here.\\n */\\ninterface ILensHub is IERC721 {\\n    /**\\n     * @notice Initializes the LensHub NFT, setting the initial governance address as well as the name and symbol in\\n     * the LensNFTBase contract.\\n     *\\n     * @param name The name to set for the hub NFT.\\n     * @param symbol The symbol to set for the hub NFT.\\n     * @param newGovernance The governance address to set.\\n     */\\n    function initialize(\\n        string calldata name,\\n        string calldata symbol,\\n        address newGovernance\\n    ) external;\\n\\n    /**\\n     * @notice Sets the privileged governance role. This function can only be called by the current governance\\n     * address.\\n     *\\n     * @param newGovernance The new governance address to set.\\n     */\\n    function setGovernance(address newGovernance) external;\\n\\n    /**\\n     * @notice Sets the emergency admin, which is a permissioned role able to set the protocol state. This function\\n     * can only be called by the governance address.\\n     *\\n     * @param newEmergencyAdmin The new emergency admin address to set.\\n     */\\n    function setEmergencyAdmin(address newEmergencyAdmin) external;\\n\\n    /**\\n     * @notice Sets the protocol state to either a global pause, a publishing pause or an unpaused state. This function\\n     * can only be called by the governance address or the emergency admin address.\\n     *\\n     * Note that this reverts if the emergency admin calls it if:\\n     *      1. The emergency admin is attempting to unpause.\\n     *      2. The emergency admin is calling while the protocol is already paused.\\n     *\\n     * @param newState The state to set, as a member of the ProtocolState enum.\\n     */\\n    function setState(DataTypes.ProtocolState newState) external;\\n\\n    /**\\n     * @notice Adds or removes a profile creator from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param profileCreator The profile creator address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the profile creator should be whitelisted.\\n     */\\n    function whitelistProfileCreator(address profileCreator, bool whitelist)\\n        external;\\n\\n    /**\\n     * @notice Adds or removes a follow module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param followModule The follow module contract address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the follow module should be whitelisted.\\n     */\\n    function whitelistFollowModule(address followModule, bool whitelist)\\n        external;\\n\\n    /**\\n     * @notice Adds or removes a reference module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param referenceModule The reference module contract to add or remove from the whitelist.\\n     * @param whitelist Whether or not the reference module should be whitelisted.\\n     */\\n    function whitelistReferenceModule(address referenceModule, bool whitelist)\\n        external;\\n\\n    /**\\n     * @notice Adds or removes a collect module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param collectModule The collect module contract address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the collect module should be whitelisted.\\n     */\\n    function whitelistCollectModule(address collectModule, bool whitelist)\\n        external;\\n\\n    /**\\n     * @notice Creates a profile with the specified parameters, minting a profile NFT to the given recipient. This\\n     * function must be called by a whitelisted profile creator.\\n     *\\n     * @param vars A CreateProfileData struct containing the following params:\\n     *      to: The address receiving the profile.\\n     *      handle: The handle to set for the profile, must be unique and non-empty.\\n     *      imageURI: The URI to set for the profile image.\\n     *      followModule: The follow module to use, can be the zero address.\\n     *      followModuleInitData: The follow module initialization data, if any.\\n     */\\n    function createProfile(DataTypes.CreateProfileData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Sets the mapping between wallet and its main profile identity.\\n     *\\n     * @param profileId The token ID of the profile to set as the main profile identity.\\n     */\\n    function setDefaultProfile(uint256 profileId) external;\\n\\n    /**\\n     * @notice Sets the mapping between wallet and its main profile identity via signature with the specified parameters.\\n     *\\n     * @param vars A SetDefaultProfileWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setDefaultProfileWithSig(\\n        DataTypes.SetDefaultProfileWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's follow module, must be called by the profile owner.\\n     *\\n     * @param profileId The token ID of the profile to set the follow module for.\\n     * @param followModule The follow module to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the follow module for initialization.\\n     */\\n    function setFollowModule(\\n        uint256 profileId,\\n        address followModule,\\n        bytes calldata followModuleInitData\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's follow module via signature with the specified parameters.\\n     *\\n     * @param vars A SetFollowModuleWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setFollowModuleWithSig(\\n        DataTypes.SetFollowModuleWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's dispatcher, giving that dispatcher rights to publish to that profile.\\n     *\\n     * @param profileId The token ID of the profile of the profile to set the dispatcher for.\\n     * @param dispatcher The dispatcher address to set for the given profile ID.\\n     */\\n    function setDispatcher(uint256 profileId, address dispatcher) external;\\n\\n    /**\\n     * @notice Sets a profile's dispatcher via signature with the specified parameters.\\n     *\\n     * @param vars A SetDispatcherWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setDispatcherWithSig(\\n        DataTypes.SetDispatcherWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's URI, which is reflected in the `tokenURI()` function.\\n     *\\n     * @param profileId The token ID of the profile of the profile to set the URI for.\\n     * @param imageURI The URI to set for the given profile.\\n     */\\n    function setProfileImageURI(uint256 profileId, string calldata imageURI)\\n        external;\\n\\n    /**\\n     * @notice Sets a profile's URI via signature with the specified parameters.\\n     *\\n     * @param vars A SetProfileImageURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setProfileImageURIWithSig(\\n        DataTypes.SetProfileImageURIWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a followNFT URI for a given profile's follow NFT.\\n     *\\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\\n     * @param followNFTURI The follow NFT URI to set.\\n     */\\n    function setFollowNFTURI(uint256 profileId, string calldata followNFTURI)\\n        external;\\n\\n    /**\\n     * @notice Sets a followNFT URI via signature with the specified parameters.\\n     *\\n     * @param vars A SetFollowNFTURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setFollowNFTURIWithSig(\\n        DataTypes.SetFollowNFTURIWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Publishes a post to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A PostData struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the post's publication ID.\\n     */\\n    function post(DataTypes.PostData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a post to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A PostWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the post's publication ID.\\n     */\\n    function postWithSig(DataTypes.PostWithSigData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Publishes a comment to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A CommentData struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the comment's publication ID.\\n     */\\n    function comment(DataTypes.CommentData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Publishes a comment to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A CommentWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the comment's publication ID.\\n     */\\n    function commentWithSig(DataTypes.CommentWithSigData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Publishes a mirror to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A MirrorData struct containing the necessary parameters.\\n     *\\n     * @return uint256 An integer representing the mirror's publication ID.\\n     */\\n    function mirror(DataTypes.MirrorData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Publishes a mirror to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A MirrorWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the mirror's publication ID.\\n     */\\n    function mirrorWithSig(DataTypes.MirrorWithSigData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Follows the given profiles, executing each profile's follow module logic (if any) and minting followNFTs to the caller.\\n     *\\n     * NOTE: Both the `profileIds` and `datas` arrays must be of the same length, regardless if the profiles do not have a follow module set.\\n     *\\n     * @param profileIds The token ID array of the profiles to follow.\\n     * @param datas The arbitrary data array to pass to the follow module for each profile if needed.\\n     *\\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\\n     */\\n    function follow(uint256[] calldata profileIds, bytes[] calldata datas)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Follows a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A FollowWithSigData struct containing the regular parameters as well as the signing follower's address\\n     * and an EIP712Signature struct.\\n     *\\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\\n     */\\n    function followWithSig(DataTypes.FollowWithSigData calldata vars)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Collects a given publication, executing collect module logic and minting a collectNFT to the caller.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to collect.\\n     * @param pubId The publication to collect's publication ID.\\n     * @param data The arbitrary data to pass to the collect module if needed.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function collect(\\n        uint256 profileId,\\n        uint256 pubId,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Collects a given publication via signature with the specified parameters.\\n     *\\n     * @param vars A CollectWithSigData struct containing the regular parameters as well as the collector's address and\\n     * an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function collectWithSig(DataTypes.CollectWithSigData calldata vars)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @dev Helper function to emit a detailed followNFT transfer event from the hub, to be consumed by frontends to track\\n     * followNFT transfers.\\n     *\\n     * @param profileId The token ID of the profile associated with the followNFT being transferred.\\n     * @param followNFTId The followNFT being transferred's token ID.\\n     * @param from The address the followNFT is being transferred from.\\n     * @param to The address the followNFT is being transferred to.\\n     */\\n    function emitFollowNFTTransferEvent(\\n        uint256 profileId,\\n        uint256 followNFTId,\\n        address from,\\n        address to\\n    ) external;\\n\\n    /**\\n     * @dev Helper function to emit a detailed collectNFT transfer event from the hub, to be consumed by frontends to track\\n     * collectNFT transfers.\\n     *\\n     * @param profileId The token ID of the profile associated with the collect NFT being transferred.\\n     * @param pubId The publication ID associated with the collect NFT being transferred.\\n     * @param collectNFTId The collectNFT being transferred's token ID.\\n     * @param from The address the collectNFT is being transferred from.\\n     * @param to The address the collectNFT is being transferred to.\\n     */\\n    function emitCollectNFTTransferEvent(\\n        uint256 profileId,\\n        uint256 pubId,\\n        uint256 collectNFTId,\\n        address from,\\n        address to\\n    ) external;\\n\\n    /// ************************\\n    /// *****VIEW FUNCTIONS*****\\n    /// ************************\\n\\n    /**\\n     * @notice Returns whether or not a profile creator is whitelisted.\\n     *\\n     * @param profileCreator The address of the profile creator to check.\\n     *\\n     * @return bool True if the profile creator is whitelisted, false otherwise.\\n     */\\n    function isProfileCreatorWhitelisted(address profileCreator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns default profile for a given wallet address\\n     *\\n     * @param wallet The address to find the default mapping\\n     *\\n     * @return uint256 The default profile id, which will be 0 if not mapped.\\n     */\\n    function defaultProfile(address wallet) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns whether or not a follow module is whitelisted.\\n     *\\n     * @param followModule The address of the follow module to check.\\n     *\\n     * @return bool True if the the follow module is whitelisted, false otherwise.\\n     */\\n    function isFollowModuleWhitelisted(address followModule)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns whether or not a reference module is whitelisted.\\n     *\\n     * @param referenceModule The address of the reference module to check.\\n     *\\n     * @return bool True if the the reference module is whitelisted, false otherwise.\\n     */\\n    function isReferenceModuleWhitelisted(address referenceModule)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns whether or not a collect module is whitelisted.\\n     *\\n     * @param collectModule The address of the collect module to check.\\n     *\\n     * @return bool True if the the collect module is whitelisted, false otherwise.\\n     */\\n    function isCollectModuleWhitelisted(address collectModule)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns the currently configured governance address.\\n     *\\n     * @return address The address of the currently configured governance.\\n     */\\n    function getGovernance() external view returns (address);\\n\\n    /**\\n     * @notice Returns the dispatcher associated with a profile.\\n     *\\n     * @param profileId The token ID of the profile to query the dispatcher for.\\n     *\\n     * @return address The dispatcher address associated with the profile.\\n     */\\n    function getDispatcher(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the publication count for a given profile.\\n     *\\n     * @param profileId The token ID of the profile to query.\\n     *\\n     * @return uint256 The number of publications associated with the queried profile.\\n     */\\n    function getPubCount(uint256 profileId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the followNFT associated with a given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile to query the followNFT for.\\n     *\\n     * @return address The followNFT associated with the given profile.\\n     */\\n    function getFollowNFT(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the followNFT URI associated with a given profile.\\n     *\\n     * @param profileId The token ID of the profile to query the followNFT URI for.\\n     *\\n     * @return string The followNFT URI associated with the given profile.\\n     */\\n    function getFollowNFTURI(uint256 profileId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Returns the collectNFT associated with a given publication, if any.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return address The address of the collectNFT associated with the queried publication.\\n     */\\n    function getCollectNFT(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Returns the follow module associated witha  given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile to query the follow module for.\\n     *\\n     * @return address The address of the follow module associated with the given profile.\\n     */\\n    function getFollowModule(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the collect module associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return address The address of the collect module associated with the queried publication.\\n     */\\n    function getCollectModule(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Returns the reference module associated witha  given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to querythe reference module for.\\n     * @param pubId The publication ID of the publication to query the reference module for.\\n     *\\n     * @return address The address of the reference module associated with the given profile.\\n     */\\n    function getReferenceModule(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Returns the handle associated with a profile.\\n     *\\n     * @param profileId The token ID of the profile to query the handle for.\\n     *\\n     * @return string The handle associated with the profile.\\n     */\\n    function getHandle(uint256 profileId) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the publication pointer (profileId & pubId) associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query the pointer for.\\n     * @param pubId The publication ID of the publication to query the pointer for.\\n     *\\n     * @return tuple First, the profile ID of the profile the current publication is pointing to, second, the\\n     * publication ID of the publication the current publication is pointing to.\\n     */\\n    function getPubPointer(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the URI associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return string The URI associated with a given publication.\\n     */\\n    function getContentURI(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Returns the profile token ID according to a given handle.\\n     *\\n     * @param handle The handle to resolve the profile token ID with.\\n     *\\n     * @return uint256 The profile ID the passed handle points to.\\n     */\\n    function getProfileIdByHandle(string calldata handle)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the full profile struct associated with a given profile token ID.\\n     *\\n     * @param profileId The token ID of the profile to query.\\n     *\\n     * @return ProfileStruct The profile struct of the given profile.\\n     */\\n    function getProfile(uint256 profileId)\\n        external\\n        view\\n        returns (DataTypes.ProfileStruct memory);\\n\\n    /**\\n     * @notice Returns the full publication struct for a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return PublicationStruct The publication struct associated with the queried publication.\\n     */\\n    function getPub(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (DataTypes.PublicationStruct memory);\\n\\n    /**\\n     * @notice Returns the publication type associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return PubType The publication type, as a member of an enum (either \\\"post,\\\" \\\"comment\\\" or \\\"mirror\\\").\\n     */\\n    function getPubType(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (DataTypes.PubType);\\n\\n    /**\\n     * @notice Returns the follow NFT implementation address.\\n     *\\n     * @return address The follow NFT implementation address.\\n     */\\n    function getFollowNFTImpl() external view returns (address);\\n\\n    /**\\n     * @notice Returns the collect NFT implementation address.\\n     *\\n     * @return address The collect NFT implementation address.\\n     */\\n    function getCollectNFTImpl() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa3ab9df0697134cd879ca19123a159c63fc070cb4e5c963f68b13ba80e8bde92\",\"license\":\"MIT\"},\"contracts/libraries/LensDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title DataTypes\\n * @author Lens Protocol\\n *\\n * @notice A standard library of data types used throughout the Lens Protocol.\\n */\\nlibrary DataTypes {\\n    /**\\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\\n     *\\n     * @param Unpaused The fully unpaused state.\\n     * @param PublishingPaused The state where only publication creation functions are paused.\\n     * @param Paused The fully paused state.\\n     */\\n    enum ProtocolState {\\n        Unpaused,\\n        PublishingPaused,\\n        Paused\\n    }\\n\\n    /**\\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\\n     *\\n     * @param Post A standard post, having a URI, a collect module but no pointer to another publication.\\n     * @param Comment A comment, having a URI, a collect module and a pointer to another publication.\\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or collect module.\\n     * @param Nonexistent An indicator showing the queried publication does not exist.\\n     */\\n    enum PubType {\\n        Post,\\n        Comment,\\n        Mirror,\\n        Nonexistent\\n    }\\n\\n    /**\\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\\n     *\\n     * @param v The signature's recovery parameter.\\n     * @param r The signature's r parameter.\\n     * @param s The signature's s parameter\\n     * @param deadline The signature's deadline\\n     */\\n    struct EIP712Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @notice A struct containing profile data.\\n     *\\n     * @param pubCount The number of publications made to this profile.\\n     * @param followModule The address of the current follow module in use by this profile, can be empty.\\n     * @param followNFT The address of the followNFT associated with this profile, can be empty..\\n     * @param handle The profile's associated handle.\\n     * @param imageURI The URI to be used for the profile's image.\\n     * @param followNFTURI The URI to be used for the follow NFT.\\n     */\\n    struct ProfileStruct {\\n        uint256 pubCount;\\n        address followModule;\\n        address followNFT;\\n        string handle;\\n        string imageURI;\\n        string followNFTURI;\\n    }\\n\\n    /**\\n     * @notice A struct containing data associated with each new publication.\\n     *\\n     * @param profileIdPointed The profile token ID this publication points to, for mirrors and comments.\\n     * @param pubIdPointed The publication ID this publication points to, for mirrors and comments.\\n     * @param contentURI The URI associated with this publication.\\n     * @param referenceModule The address of the current reference module in use by this profile, can be empty.\\n     * @param collectModule The address of the collect module associated with this publication, this exists for all publication.\\n     * @param collectNFT The address of the collectNFT associated with this publication, if any.\\n     */\\n    struct PublicationStruct {\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        string contentURI;\\n        address referenceModule;\\n        address collectModule;\\n        address collectNFT;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `createProfile()` function.\\n     *\\n     * @param to The address receiving the profile.\\n     * @param handle The handle to set for the profile, must be unique and non-empty.\\n     * @param imageURI The URI to set for the profile image.\\n     * @param followModule The follow module to use, can be the zero address.\\n     * @param followModuleInitData The follow module initialization data, if any.\\n     * @param followNFTURI The URI to use for the follow NFT.\\n     */\\n    struct CreateProfileData {\\n        address to;\\n        string handle;\\n        string imageURI;\\n        address followModule;\\n        bytes followModuleInitData;\\n        string followNFTURI;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setDefaultProfileWithSig()` function. Parameters are\\n     * the same as the regular `setDefaultProfile()` function, with an added EIP712Signature.\\n     *\\n     * @param wallet The address of the wallet setting the default profile.\\n     * @param profileId The token ID of the profile which will be set as default, or zero.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetDefaultProfileWithSigData {\\n        address wallet;\\n        uint256 profileId;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setFollowModuleWithSig()` function. Parameters are\\n     * the same as the regular `setFollowModule()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to change the followModule for.\\n     * @param followModule The followModule to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the followModule for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetFollowModuleWithSigData {\\n        uint256 profileId;\\n        address followModule;\\n        bytes followModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setDispatcherWithSig()` function. Parameters are the same\\n     * as the regular `setDispatcher()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to set the dispatcher for.\\n     * @param dispatcher The dispatcher address to set for the profile.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetDispatcherWithSigData {\\n        uint256 profileId;\\n        address dispatcher;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setProfileImageURIWithSig()` function. Parameters are the same\\n     * as the regular `setProfileImageURI()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to set the URI for.\\n     * @param imageURI The URI to set for the given profile image.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetProfileImageURIWithSigData {\\n        uint256 profileId;\\n        string imageURI;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setFollowNFTURIWithSig()` function. Parameters are the same\\n     * as the regular `setFollowNFTURI()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\\n     * @param followNFTURI The follow NFT URI to set.\\n     * @param sig The EIP712Signature struct containing the followNFT's associated profile owner's signature.\\n     */\\n    struct SetFollowNFTURIWithSigData {\\n        uint256 profileId;\\n        string followNFTURI;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `post()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param collectModule The collect module to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct PostData {\\n        uint256 profileId;\\n        string contentURI;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `postWithSig()` function. Parameters are the same as\\n     * the regular `post()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param collectModule The collectModule to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct PostWithSigData {\\n        uint256 profileId;\\n        string contentURI;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `comment()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param profileIdPointed The profile token ID to point the comment to.\\n     * @param pubIdPointed The publication ID to point the comment to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collect module to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct CommentData {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `commentWithSig()` function. Parameters are the same as\\n     * the regular `comment()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param profileIdPointed The profile token ID to point the comment to.\\n     * @param pubIdPointed The publication ID to point the comment to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collectModule to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct CommentWithSigData {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirror()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param profileIdPointed The profile token ID to point the mirror to.\\n     * @param pubIdPointed The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct MirrorData {\\n        uint256 profileId;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirrorWithSig()` function. Parameters are the same as\\n     * the regular `mirror()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param profileIdPointed The profile token ID to point the mirror to.\\n     * @param pubIdPointed The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct MirrorWithSigData {\\n        uint256 profileId;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `followWithSig()` function. Parameters are the same\\n     * as the regular `follow()` function, with the follower's (signer) address and an EIP712Signature added.\\n     *\\n     * @param follower The follower which is the message signer.\\n     * @param profileIds The array of token IDs of the profiles to follow.\\n     * @param datas The array of arbitrary data to pass to the followModules if needed.\\n     * @param sig The EIP712Signature struct containing the follower's signature.\\n     */\\n    struct FollowWithSigData {\\n        address follower;\\n        uint256[] profileIds;\\n        bytes[] datas;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `collectWithSig()` function. Parameters are the same as\\n     * the regular `collect()` function, with the collector's (signer) address and an EIP712Signature added.\\n     *\\n     * @param collector The collector which is the message signer.\\n     * @param profileId The token ID of the profile that published the publication to collect.\\n     * @param pubId The publication to collect's publication ID.\\n     * @param data The arbitrary data to pass to the collectModule if needed.\\n     * @param sig The EIP712Signature struct containing the collector's signature.\\n     */\\n    struct CollectWithSigData {\\n        address collector;\\n        uint256 profileId;\\n        uint256 pubId;\\n        bytes data;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setProfileMetadataWithSig()` function.\\n     *\\n     * @param profileId The profile ID for which to set the metadata.\\n     * @param metadata The metadata string to set for the profile and user.\\n     * @param sig The EIP712Signature struct containing the user's signature.\\n     */\\n    struct SetProfileMetadataWithSigData {\\n        uint256 profileId;\\n        string metadata;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `toggleFollowWithSig()` function.\\n     *\\n     * @param follower The follower which is the message signer.\\n     * @param profileIds The token ID array of the profiles.\\n     * @param enables The array of booleans to enable/disable follows.\\n     * @param sig The EIP712Signature struct containing the follower's signature.\\n     */\\n    struct ToggleFollowWithSigData {\\n        address follower;\\n        uint256[] profileIds;\\n        bool[] enables;\\n        EIP712Signature sig;\\n    }\\n}\\n\",\"keccak256\":\"0x010e8a2b32890fba7eae1858bf4cede187b811bed8db956e10cd82ec0dec27c5\",\"license\":\"MIT\"},\"contracts/vendor/oz/IERC721MetaTxEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n//solhint-disable no-empty-blocks\\ninterface IERC721MetaTxEnumerable is IERC721Enumerable {\\n\\n}\\n\",\"keccak256\":\"0x6a3cf4db46730290c6870cce30be9dd194e519cb1a39a69b94121fe7197f9287\",\"license\":\"MIT\"},\"contracts/vendor/proxy/EIP173/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address adminAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            adminAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x428ced1961d42c505a3e49d90498f92f4b0df8537e5ffa59f14ba375d99150a1\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620014fe380380620014fe833981810160405281019062000038919062000217565b828073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508360a081815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250505050505062000289565b600080fd5b6000819050919050565b6200010281620000ed565b81146200010e57600080fd5b50565b6000815190506200012281620000f7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001558262000128565b9050919050565b620001678162000148565b81146200017357600080fd5b50565b60008151905062000187816200015c565b92915050565b60006200019a8262000148565b9050919050565b620001ac816200018d565b8114620001b857600080fd5b50565b600081519050620001cc81620001a1565b92915050565b6000620001df8262000148565b9050919050565b620001f181620001d2565b8114620001fd57600080fd5b50565b6000815190506200021181620001e6565b92915050565b60008060008060808587031215620002345762000233620000e8565b5b6000620002448782880162000111565b9450506020620002578782880162000176565b93505060406200026a87828801620001bb565b92505060606200027d8782880162000200565b91505092959194509250565b60805160a05160c05160e051611218620002e66000396000818161052b0152818161063601526106cf0152600081816102d40152818161036601526104420152600081816101ed01526102580152600061027e01526112186000f3fe608060405234801561001057600080fd5b50600436106100925760003560e01c80636729635011610066578063672963501461014557806375dc9bd514610163578063963ff14114610193578063b02cfdc3146101af578063f1b2f8bc146101cd57610092565b80627e468514610097578063150b7a02146100c75780635034227b146100f7578063572b6c0514610115575b600080fd5b6100b160048036038101906100ac9190610808565b6101e9565b6040516100be9190610850565b60405180910390f35b6100e160048036038101906100dc9190610a0f565b610242565b6040516100ee9190610acd565b60405180910390f35b6100ff610256565b60405161010c9190610af7565b60405180910390f35b61012f600480360381019061012a9190610b12565b61027a565b60405161013c9190610850565b60405180910390f35b61014d6102d2565b60405161015a9190610b9e565b60405180910390f35b61017d60048036038101906101789190610808565b6102f6565b60405161018a9190610af7565b60405180910390f35b6101ad60048036038101906101a89190610bdd565b61030e565b005b6101b7610634565b6040516101c49190610c47565b60405180910390f35b6101e760048036038101906101e29190610808565b610658565b005b60007f0000000000000000000000000000000000000000000000000000000000000000600080848152602001908152602001600020544261022a9190610c91565b10610238576001905061023d565b600090505b919050565b600063150b7a0260e01b9050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020528060005260406000206000915090505481565b6103173361027a565b610356576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034d90610d22565b60405180910390fd5b600061036061075b565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016103bd9190610d51565b602060405180830381865afa1580156103da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fe9190610d81565b1161043e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043590610dfa565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632f745c598360006040518363ffffffff1660e01b815260040161049c929190610e55565b602060405180830381865afa1580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd9190610d81565b90506104e8816101e9565b610527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051e90610eca565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663963ff141856040518263ffffffff1660e01b81526004016105829190611154565b6020604051808303816000875af11580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c59190610d81565b9050426000808481526020019081526020016000208190555080828473ffffffffffffffffffffffffffffffffffffffff167fb3de7ef76dc0d0512b40164c07da30a2bd66a76a55c8748f0c2fe7bcc6cc39e1426040516106269190610af7565b60405180910390a450505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61066061078d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c4906111c2565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f1b2f8bc826040518263ffffffff1660e01b81526004016107269190610af7565b600060405180830381600087803b15801561074057600080fd5b505af1158015610754573d6000803e3d6000fd5b5050505050565b60006107663361027a565b1561077a57601436033560601c9050610789565b6107826107b6565b905061078a565b5b90565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6107e5816107d2565b81146107f057600080fd5b50565b600081359050610802816107dc565b92915050565b60006020828403121561081e5761081d6107c8565b5b600061082c848285016107f3565b91505092915050565b60008115159050919050565b61084a81610835565b82525050565b60006020820190506108656000830184610841565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108968261086b565b9050919050565b6108a68161088b565b81146108b157600080fd5b50565b6000813590506108c38161089d565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61091c826108d3565b810181811067ffffffffffffffff8211171561093b5761093a6108e4565b5b80604052505050565b600061094e6107be565b905061095a8282610913565b919050565b600067ffffffffffffffff82111561097a576109796108e4565b5b610983826108d3565b9050602081019050919050565b82818337600083830152505050565b60006109b26109ad8461095f565b610944565b9050828152602081018484840111156109ce576109cd6108ce565b5b6109d9848285610990565b509392505050565b600082601f8301126109f6576109f56108c9565b5b8135610a0684826020860161099f565b91505092915050565b60008060008060808587031215610a2957610a286107c8565b5b6000610a37878288016108b4565b9450506020610a48878288016108b4565b9350506040610a59878288016107f3565b925050606085013567ffffffffffffffff811115610a7a57610a796107cd565b5b610a86878288016109e1565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610ac781610a92565b82525050565b6000602082019050610ae26000830184610abe565b92915050565b610af1816107d2565b82525050565b6000602082019050610b0c6000830184610ae8565b92915050565b600060208284031215610b2857610b276107c8565b5b6000610b36848285016108b4565b91505092915050565b6000819050919050565b6000610b64610b5f610b5a8461086b565b610b3f565b61086b565b9050919050565b6000610b7682610b49565b9050919050565b6000610b8882610b6b565b9050919050565b610b9881610b7d565b82525050565b6000602082019050610bb36000830184610b8f565b92915050565b600080fd5b600060c08284031215610bd457610bd3610bb9565b5b81905092915050565b600060208284031215610bf357610bf26107c8565b5b600082013567ffffffffffffffff811115610c1157610c106107cd565b5b610c1d84828501610bbe565b91505092915050565b6000610c3182610b6b565b9050919050565b610c4181610c26565b82525050565b6000602082019050610c5c6000830184610c38565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c9c826107d2565b9150610ca7836107d2565b925082821015610cba57610cb9610c62565b5b828203905092915050565b600082825260208201905092915050565b7f4b6f727544616f3a204f6e6c792047656c61746f52656c617900000000000000600082015250565b6000610d0c601983610cc5565b9150610d1782610cd6565b602082019050919050565b60006020820190508181036000830152610d3b81610cff565b9050919050565b610d4b8161088b565b82525050565b6000602082019050610d666000830184610d42565b92915050565b600081519050610d7b816107dc565b92915050565b600060208284031215610d9757610d966107c8565b5b6000610da584828501610d6c565b91505092915050565b7f4b6f727544616f3a204e6f204b6f727544616f4e667400000000000000000000600082015250565b6000610de4601683610cc5565b9150610def82610dae565b602082019050919050565b60006020820190508181036000830152610e1381610dd7565b9050919050565b6000819050919050565b6000610e3f610e3a610e3584610e1a565b610b3f565b6107d2565b9050919050565b610e4f81610e24565b82525050565b6000604082019050610e6a6000830185610d42565b610e776020830184610e46565b9392505050565b7f4b6f727544616f3a20506f737420746f6f206672657175656e74000000000000600082015250565b6000610eb4601a83610cc5565b9150610ebf82610e7e565b602082019050919050565b60006020820190508181036000830152610ee381610ea7565b9050919050565b6000610ef960208401846107f3565b905092915050565b610f0a816107d2565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610f3c57610f3b610f1a565b5b83810192508235915060208301925067ffffffffffffffff821115610f6457610f63610f10565b5b600182023603831315610f7a57610f79610f15565b5b509250929050565b600082825260208201905092915050565b6000610f9f8385610f82565b9350610fac838584610990565b610fb5836108d3565b840190509392505050565b6000610fcf60208401846108b4565b905092915050565b610fe08161088b565b82525050565b6000808335600160200384360303811261100357611002610f1a565b5b83810192508235915060208301925067ffffffffffffffff82111561102b5761102a610f10565b5b60018202360383131561104157611040610f15565b5b509250929050565b600082825260208201905092915050565b60006110668385611049565b9350611073838584610990565b61107c836108d3565b840190509392505050565b600060c0830161109a6000840184610eea565b6110a76000860182610f01565b506110b56020840184610f1f565b85830360208701526110c8838284610f93565b925050506110d96040840184610fc0565b6110e66040860182610fd7565b506110f46060840184610fe6565b858303606087015261110783828461105a565b925050506111186080840184610fc0565b6111256080860182610fd7565b5061113360a0840184610fe6565b85830360a087015261114683828461105a565b925050508091505092915050565b6000602082019050818103600083015261116e8184611087565b905092915050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b60006111ac600e83610cc5565b91506111b782611176565b602082019050919050565b600060208201905081810360008301526111db8161119f565b905091905056fea264697066735822122031070fcf6062c49b668dcab42f3ad50714cd8fe12537d3098dcfab4cf39cf7e164736f6c634300080e0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1187,
        "contract": "contracts/KoruDao.sol:KoruDao",
        "label": "lastPost",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
